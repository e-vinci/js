{"componentChunkName":"component---src-templates-mdx-pages-js","path":"/modules/2/","result":{"data":{"mdx":{"id":"856a5ceb-8d62-50bb-8852-6133fc964a17","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Module 2 : JAX-RS & auths\",\n  \"description\": \"Authentification & autorisation au sein de JAX-RS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Module 2 : JAX-RS & auths\"), mdx(\"p\", null, \"Ce module vous offre le refactor d'une application JAX-RS tout en mettant en oeuvre le m\\xE9canisme\\nd'authentification et d'autorisation d'acc\\xE8s aux op\\xE9rations. \"), mdx(\"p\", null, \"Voici les sujets trait\\xE9s :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionA\"\n  }, \"Refactor d'une application JAX-RS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"b) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionB\"\n  }, \"Configuration de l'application via un fichier .properties\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"c) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionC\"\n  }, \"Rappel de conventions sur les RESTful APIs, authentification & autorisation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionD\"\n  }, \"Authentification & cr\\xE9ation de token JWT\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"e) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionE\"\n  }, \"Utilisation de jbcrypt pour g\\xE9rer les passwords\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"f) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionF\"\n  }, \"Autorisation JWT, filtres, providers & \\\"Name binding\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"g) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionG\"\n  }, \"Envoi de requ\\xEAtes \\xE0 ses APIs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"h) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionH\"\n  }, \"Gestion des requ\\xEAtes contenant des objets JSON quelconques\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"i) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionI\"\n  }, \"Gestion des r\\xE9ponses et s\\xE9rialisation d\\u2019objets JSON quelconques\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"j) \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/js/modules/2#sectionJ\"\n  }, \"Exercice 2.1\"))), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionA\"\n  }), \"a) Refactor d'une application JAX-RS\"), mdx(\"h2\", null, \"a.1) Refactor g\\xE9n\\xE9ral\"), mdx(\"p\", null, \"Dans le Module 1, nous avons d\\xE9velopp\\xE9 ensemble une RESTful API permettant de g\\xE9rer des films.\"), mdx(\"p\", null, \"Nous allons maintenant faire un refactor de cette application afin de mieux architecturer le code.\\nVoici les motivations pour r\\xE9architecturer l'API :\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Souhait de ne pas mixer le code associ\\xE9 \\xE0 la pr\\xE9sentation des ressources, c'est-\\xE0-dire le code\\ns'occupant des r\\xE9ponses aux requ\\xEAtes clients, au code associ\\xE9 \\xE0 la gestion des donn\\xE9es ;\\non veut pouvoir mettre \\xE0 jour la couche d'acc\\xE8s aux donn\\xE9es sans devoir mettre \\xE0 jour les Root Ressources.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"La partie business de l'application, en d'autres mots la logique d'acc\\xE8s aux op\\xE9rations sur les\\ndonn\\xE9es, ne doit pas \\xEAtre s\\xE9par\\xE9e de la gestion des donn\\xE9es.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"On veut pouvoir rapidement distinguer certaines parties de code : les objets du domaine, le main,\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"les op\\xE9rations offertes sur les ressources, les utilitaires, la logique d'acc\\xE8s\\naux op\\xE9rations sur les donn\\xE9es et la gestion des donn\\xE9es.\")), mdx(\"br\", null), mdx(\"p\", null, \"Pour ce faire, nous veuillez cr\\xE9er ces packages au sein de votre API g\\xE9rant les films :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"api\"), \" : s'occupera des Root Resources et donc de la pr\\xE9sentation des ressources aux clients.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"domain\"), \" : inclura tous les objets du domaines, les sacs de donn\\xE9es.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"main\"), \" : g\\xE8re le d\\xE9marrage de l'application JAX-RS.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"services\"), \" : permet de traiter de la logique d'acc\\xE8s aux op\\xE9rations sur les donn\\xE9es et la gestion de\\nces donn\\xE9es.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"utils\"), \" : traite des morceaux de code r\\xE9utilisables sur potentiellement toutes les applications\\nJAX-RS (gestion de la config par exemple).\")), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez d\\xE9placer vos classes dans les bons packages.\\nLa classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" est \\xE0 reprendre actuellement au sein du package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"services\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Au sein du package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"services\"), \", veuillez cr\\xE9er une nouvelle classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmDataService\"), \" qui\\ns'occupera de la logique et de l'acc\\xE8s aux donn\\xE9es en faisant appel aux m\\xE9thodes de la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \".\\nVoici le code de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmDataService\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"package be.vinci.services;\\n\\nimport be.vinci.domain.Film;\\nimport jakarta.ws.rs.*;\\nimport jakarta.ws.rs.core.MediaType;\\nimport jakarta.ws.rs.core.Response;\\nimport org.apache.commons.text.StringEscapeUtils;\\n\\nimport java.util.List;\\n\\npublic class FilmDataService {\\n    public List<Film> getAll(int minimumDuration) {\\n        var films = Json.parse();\\n        if (minimumDuration != -1) {\\n            List<Film> filmsFiltered = films.stream().filter(film -> film.getDuration() >= minimumDuration)\\n                    .toList();\\n            return filmsFiltered;\\n        }\\n        return films;\\n    }\\n\\n\\n    public Film getOne(int id) {\\n        var films = Json.parse();\\n        Film filmFound = films.stream().filter(film -> film.getId() == id).findAny().orElse(null);\\n        return filmFound;\\n    }\\n\\n    public Film createOne(Film film) {\\n        var films = Json.parse();\\n        film.setId(nextFilmId());\\n        film.setTitle(StringEscapeUtils.escapeHtml4(film.getTitle()));\\n        film.setLink(StringEscapeUtils.escapeHtml4(film.getLink()));\\n        films.add(film);\\n        Json.serialize(films);\\n        return film;\\n    }\\n\\n\\n    public Film deleteOne(int id) {\\n        var films = Json.parse();\\n        Film filmToDelete = films.stream().filter(film -> film.getId() == id).findAny().orElse(null);\\n        films.remove(filmToDelete);\\n        Json.serialize(films);\\n        return filmToDelete;\\n    }\\n\\n    public Film updateOne(Film film, int id) {\\n        var films = Json.parse();\\n        Film filmToUpdate = films.stream().filter(f -> f.getId() == id).findAny().orElse(null);\\n        film.setId(id);\\n        film.setTitle(StringEscapeUtils.escapeHtml4(film.getTitle()));\\n        film.setLink(StringEscapeUtils.escapeHtml4(film.getLink()));\\n        films.remove(film); // thanks to equals(), films is found via its id\\n        films.add(film);\\n        Json.serialize(films);\\n        return film;\\n    }\\n\\n    public int nextFilmId() {\\n        var films = Json.parse();\\n        if (films.size() == 0)\\n            return 1;\\n        return films.get(films.size() - 1).getId() + 1;\\n    }\\n}\\n\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Dans le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \", faites en sorte de d\\xE9couvrir les ressources que dans le package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{1}\",\n    \"{1}\": true\n  }, \"final ResourceConfig rc = new ResourceConfig().packages(\\\"be.vinci.api\\\")\\n                .register(JacksonFeature.class);\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Dans \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmResource\"), \", cr\\xE9ez une instance de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmDataService\"), \" et faites appel aux m\\xE9thodes offertes par vos services :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"numbered {5,10,18,32,42,57}\",\n    \"numbered\": true,\n    \"{5,10,18,32,42,57}\": true\n  }, \"@Singleton\\n@Path(\\\"films\\\")\\npublic class FilmResource {\\n\\n    private FilmDataService myFilmDataService = new FilmDataService();\\n\\n    @GET\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public List<Film> getAll(@DefaultValue(\\\"-1\\\") @QueryParam(\\\"minimum-duration\\\") int minimumDuration) {\\n        return myFilmDataService.getAll(minimumDuration);\\n    }\\n\\n\\n    @GET\\n    @Path(\\\"/{id}\\\")\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public Film getOne(@PathParam(\\\"id\\\") int id) {\\n        Film filmFound = myFilmDataService.getOne(id);\\n        if (filmFound == null)\\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\\n                    .entity(\\\"Ressource not found\\\").type(\\\"text/plain\\\").build());\\n        return filmFound;\\n    }\\n\\n    @POST\\n    @Produces(MediaType.APPLICATION_JSON)\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    public Film createOne(Film film) {\\n        if (film == null || film.getTitle() == null || film.getTitle().isBlank())\\n            throw new WebApplicationException(\\n                    Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory info\\\").type(\\\"text/plain\\\").build());\\n        return myFilmDataService.createOne(film);\\n    }\\n\\n    @DELETE\\n    @Path(\\\"/{id}\\\")\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public Film deleteOne(@PathParam(\\\"id\\\") int id) {\\n        if (id == 0) // default value of an integer => has not been initialized\\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory id info\\\")\\n                    .type(\\\"text/plain\\\").build());\\n        Film deletedFilm = myFilmDataService.deleteOne(id);\\n        if (deletedFilm == null)\\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\\n                    .entity(\\\"Ressource not found\\\").type(\\\"text/plain\\\").build());\\n        return deletedFilm;\\n    }\\n\\n    @PUT\\n    @Path(\\\"/{id}\\\")\\n    @Produces(MediaType.APPLICATION_JSON)\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    public Film updateOne(Film film, @PathParam(\\\"id\\\") int id) {\\n        if (id == 0 || film == null || film.getTitle() == null || film.getTitle().isBlank())\\n            throw new WebApplicationException(\\n                    Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory info\\\").type(\\\"text/plain\\\").build());\\n        Film updatedFilm = myFilmDataService.updateOne(film, id);\\n        if (updatedFilm == null)\\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\\n                    .entity(\\\"Ressource not found\\\").type(\\\"text/plain\\\").build());\\n        return updatedFilm;\\n    }\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez ex\\xE9cuter et tester l'application pour vous assurer que celle-ci rende le m\\xEAme service\\nque pr\\xE9c\\xE9demment.\"), mdx(\"br\", null), mdx(\"h2\", null, \"a.2) Cr\\xE9ation d'un utilitaire utile pour tous les services de donn\\xE9es\"), mdx(\"p\", null, \"Nous allons maintenant g\\xE9n\\xE9raliser la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" afin qu'elle puisse \\xEAtre utilis\\xE9e avec\\nn'importe quel service de donn\\xE9es (pour n'importe quel type de ressources :\\ndes films, des textes...).\"), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez cr\\xE9er le package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"utils\"), \" au sein du package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"services\"), \".\\nNous allons maintenant rendre g\\xE9n\\xE9rique la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" afin de la param\\xE9trer sur base du type\\nassoci\\xE9 aux ressources.\\nVoici le code mis \\xE0 jour de la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public class Json<T> {\\n    private static final String DB_FILE_PATH = \\\"db.json\\\";\\n    private static Path pathToDb = Paths.get(DB_FILE_PATH);\\n    private final static ObjectMapper jsonMapper = new ObjectMapper();\\n    private T type;\\n\\n    public void serialize(List<T> items, String collectionName) {\\n        try {\\n            // if no DB file, write a new collection to a new db file\\n            if (!Files.exists(pathToDb)) {\\n                // Create an object and add a JSON array as POJO, e.g. { items:[...]}\\n                ObjectNode newCollection = jsonMapper.createObjectNode().putPOJO(collectionName, items);\\n                jsonMapper.writeValue(pathToDb.toFile(), newCollection); // write the JSON Object in the DB file\\n                return;\\n            }\\n            // get all collections : can be read as generic JsonNode, if it can be Object or Array;\\n            JsonNode allCollections = jsonMapper.readTree(pathToDb.toFile()); // e.g. { users:[...], items:[...]}\\n            // remove current collection, e.g. remove the array of items\\n            if (allCollections.has(collectionName)) {\\n                ((ObjectNode) allCollections).remove(collectionName); //e.g. it leaves { users:[...]}\\n            }\\n            // Prepare a JSON array from the list of POJOs for the collection to be updated, e.g. [{\\\"film1\\\",...}, ...]\\n            ArrayNode updatedCollection = jsonMapper.valueToTree(items);\\n            // Add the JSON array in allCollections, e.g. : { users:[...], items:[...]}\\n            ((ObjectNode) allCollections).putArray(collectionName).addAll(updatedCollection);\\n            // write to the db file allCollections\\n            jsonMapper.writeValue(pathToDb.toFile(), allCollections);\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n    public List<T> parse(String collectionName) {\\n        try {\\n            // get allCollections\\n            JsonNode node = jsonMapper.readTree(pathToDb.toFile());\\n            // accessing value of the specified field of an object node,\\n            // e.g. the JSON array within \\\"items\\\" field of { users:[...], items:[...]}\\n            JsonNode collection = node.get(collectionName);\\n            if (collection == null) // Send an empty list if there is not the requested collection\\n                return (List<T>) new ArrayList<T>();\\n            // convert the JsonNode to a List of POJOs & return it\\n            return jsonMapper.readerForListOf(Film.class).readValue(collection);\\n        } catch (FileNotFoundException e) {\\n            return (List<T>) new ArrayList<T>(); // send an empty list if there is no db file\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n            return (List<T>) new ArrayList<T>();\\n        }\\n    }\\n\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Il faut aussi mettre \\xE0 jour \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmDataService\"), \" afin de param\\xE9trer l'appel aux m\\xE9thodes de la\\nclasse \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public class FilmDataService {\\n    private static final String COLLECTION_NAME = \\\"films\\\";\\n    private static Json<Film> jsonDB = new Json<>();\\n\\n\\n    public List<Film> getAll(int minimumDuration) {\\n        var films = jsonDB.parse(COLLECTION_NAME);\\n        if (minimumDuration != -1) {\\n            List<Film> filmsFiltered = films.stream().filter(film -> film.getDuration() >= minimumDuration)\\n                    .toList();\\n            return filmsFiltered;\\n        }\\n        return films;\\n    }\\n\\n\\n    public Film getOne(int id) {\\n        var films = jsonDB.parse(COLLECTION_NAME);\\n        Film filmFound = films.stream().filter(film -> film.getId() == id).findAny().orElse(null);\\n        return filmFound;\\n    }\\n\\n    public Film createOne(Film film) {\\n        var films = jsonDB.parse(COLLECTION_NAME);\\n        film.setId(nextFilmId());\\n        film.setTitle(StringEscapeUtils.escapeHtml4(film.getTitle()));\\n        film.setLink(StringEscapeUtils.escapeHtml4(film.getLink()));\\n        films.add(film);\\n        jsonDB.serialize(films, COLLECTION_NAME);\\n        return film;\\n    }\\n\\n\\n    public Film deleteOne(int id) {\\n        var films = jsonDB.parse(COLLECTION_NAME);\\n        Film filmToDelete = films.stream().filter(film -> film.getId() == id).findAny().orElse(null);\\n        films.remove(filmToDelete);\\n        jsonDB.serialize(films, COLLECTION_NAME);\\n        return filmToDelete;\\n    }\\n\\n    public Film updateOne(Film film, int id) {\\n        var films = jsonDB.parse(COLLECTION_NAME);\\n        Film filmToUpdate = films.stream().filter(f -> f.getId() == id).findAny().orElse(null);\\n        film.setId(id);\\n        film.setTitle(StringEscapeUtils.escapeHtml4(film.getTitle()));\\n        film.setLink(StringEscapeUtils.escapeHtml4(film.getLink()));\\n        films.remove(film); // thanks to equals(), films is found via its id\\n        films.add(film);\\n        jsonDB.serialize(films, COLLECTION_NAME);\\n        return film;\\n    }\\n\\n    public int nextFilmId() {\\n        var films = jsonDB.parse(COLLECTION_NAME);\\n        if (films.size() == 0)\\n            return 1;\\n        return films.get(films.size() - 1).getId() + 1;\\n    }\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez ex\\xE9cuter et tester votre application JAX-RS pour vous assurer que celle-ci est bien\\nfonctionnelle.\"), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionB\"\n  }), \"b) Configuration de l'application via un fichier .properties\"), mdx(\"p\", null, \"Une bonne pratique est de rendre configurable son application Java via un fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".properties\"), \".\"), mdx(\"p\", null, \"Nous allons rendre cela possible en modifiant notre API de gestion de films.\\nVeuillez cr\\xE9er la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Config\"), \" dans le package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"utils\"), \" : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"package be.vinci.utils;\\n\\nimport java.io.FileInputStream;\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.util.Properties;\\n\\nimport jakarta.ws.rs.WebApplicationException;\\nimport jakarta.ws.rs.core.Response;\\nimport jakarta.ws.rs.core.Response.Status;\\n\\npublic class Config {\\n\\n    private static Properties props;\\n\\n    public static void load(String file) {\\n        props = new Properties();\\n        try (InputStream input = new FileInputStream(file)) {\\n            props.load(input);\\n        } catch (IOException e) {\\n            throw new WebApplicationException(\\n                    Response.status(Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).type(\\\"text/plain\\\").build());\\n        }\\n    }\\n\\n    public static String getProperty(String key) {\\n        return props.getProperty(key);\\n    }\\n\\n    public static Integer getIntProperty(String key) {\\n        return Integer.parseInt(props.getProperty(key));\\n    }\\n\\n    public static boolean getBoolProperty(String key) {\\n        return Boolean.parseBoolean(props.getProperty(key));\\n    }\\n\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Cette classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Config\"), \" permet de charger toutes les param\\xE8tres de configuration de l\\u2019application.\"), mdx(\"br\", null), mdx(\"p\", null, \"Les param\\xE8tres de configuration de l'application, ou propri\\xE9t\\xE9s, sont \\xE0 ajouter manuellement\\ndans un fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \".properties\"), \". Ce fichier contient des propri\\xE9t\\xE9s sous forme de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"key=value\"), \",\\ncomme par exemple l\\u2019URL du serveur int\\xE9gr\\xE9 \\xE0 l\\u2019application JAX-RS.\"), mdx(\"p\", null, \"Veuillez ajouter le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dev.properties\"), \" \\xE0 la racine de votre projet :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"BaseUri=http://localhost:8080/\\nDatabaseFilePath=db.json\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Pour que les propri\\xE9t\\xE9s soient disponibles dans tout le programme, le chargement des propri\\xE9t\\xE9s\\nse trouvant dans le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/dev.properties\"), \" se fait dans le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \", au d\\xE9but de l'ex\\xE9cution\\nde la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \", ou m\\xEAme avant l'ex\\xE9cution de cette m\\xE9thode.\\nVous pourriez ajouter cette ligne dans la fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \", avant de cr\\xE9er le serveur Http :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"Config.load(\\\"dev.properties\\\");\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Mais nous vous proposons d'utiliser un initialiseur \\\"static\\\" qui sera appel\\xE9 avant la m\\xE9thode\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \". Veuillez mettre \\xE0 jour votre classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" en ajoutant :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{2-4}\",\n    \"{2-4}\": true\n  }, \"public class Main {\\n    static{\\n        Config.load(\\\"dev.properties\\\");\\n    }\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"L\\u2019utilisation d\\u2019une propri\\xE9t\\xE9, comme par exemple l\\u2019URL du serveur int\\xE9gr\\xE9 \\xE0 l\\u2019application JAX-RS,\\nse fait via l'appel de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"getProperty\"), \" de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Config\"), \" (ou \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"getIntProperty\"), \" ou \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"getBoolProperty\"), \"). \"), mdx(\"p\", null, \"Veuillez mettre \\xE0 jour la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{6}\",\n    \"{6}\": true\n  }, \"public class Main {\\n    static{\\n        Config.load(\\\"dev.properties\\\");\\n    }\\n    // Base URI the Grizzly HTTP server will listen on\\n    public static final String BASE_URI = Config.getProperty(\\\"BaseUri\\\");\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez aussi mettre \\xE0 jour la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" pour utiliser la propri\\xE9t\\xE9 associ\\xE9e au chemin\\nvers le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"db.json\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{2}\",\n    \"{2}\": true\n  }, \"public class Json<T> {\\n    private static final String DB_FILE_PATH = Config.getProperty(\\\"DatabaseFilePath\\\");\\n\")), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionC\"\n  }), \"c) Rappel de conventions sur les RESTful APIs, authentification & autorisation\"), mdx(\"h2\", null, \"c.1) Conventions sur les RESTful APIs\"), mdx(\"p\", null, \"Pour rappel, un RESTful web service, ou RESTful API, met \\xE0 disposition des op\\xE9rations\\nsur des ressources. Ces op\\xE9rations seront disponibles via des requ\\xEAtes http associ\\xE9es \\xE0 des\\nURLs construites selon les conventions RESTful.\"), mdx(\"br\", null), mdx(\"p\", null, \"Certaines op\\xE9rations sont prot\\xE9g\\xE9es par des tokens JWT.\\nAinsi, tout client souhaitant acc\\xE9der \\xE0 ces op\\xE9rations devra fournir un token dans le header\\nde la requ\\xEAte.\\nLe client devra donc m\\xE9moriser le token re\\xE7u lors de son enregistrement (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"auths/register\"), \") ou\\nlors de son login (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"auths/login\"), \") afin de le fournir \\xE0 chaque requ\\xEAte vers une op\\xE9ration\\nprot\\xE9g\\xE9e.\"), mdx(\"p\", null, \"Voici les tableaux formalisant toutes les op\\xE9rations associ\\xE9es \\xE0 la RESTful API permettant de g\\xE9rer\\ndes films :\"), mdx(\"br\", null), mdx(\"h5\", null, \"Tableau 1 : op\\xE9rations sur les ressources de type \\\"Authentification\\\"\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"URI\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"M\\xE9thode HTTP\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Auths?\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Op\\xE9ration\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"auths/login\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"POST\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"V\\xE9rifier les \\xAB credentials \\xBB d\\u2019un User et renvoyer le User et un token JWT s\\u2019ils sont OK\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"auths/register\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"POST\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Cr\\xE9er une ressource User et un token JWT et les renvoyer\")))), mdx(\"br\", null), mdx(\"h5\", null, \"Tableau 2 : op\\xE9rations sur les ressources de type \\\"Film\\\"\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"URI\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"M\\xE9thode HTTP\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Auths?\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Op\\xE9ration\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"films\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"GET\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"READ ALL : Lire toutes les ressources de la collection\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"films?minimumduration=value\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"GET\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"READ ALL FILTERED : Lire toutes les ressources de la collection selon le filtre donn\\xE9\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"films/{id}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"GET\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Non\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"READ ONE : Lire la ressource identifi\\xE9e\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"films\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"POST\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"JWT\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CREATE ONE : Cr\\xE9er une ressource bas\\xE9e sur les donn\\xE9es de la requ\\xEAte\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"films/{id}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DELETE\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"JWT\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DELETE ONE : Effacer la ressource identifi\\xE9e\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"films/{id}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"PUT\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"JWT\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"UPDATE ONE : Replacer l'enti\\xE8ret\\xE9 de la ressource par les donn\\xE9es de la requ\\xEAte\")))), mdx(\"br\", null), mdx(\"h2\", null, \"c.2) JWT authentification et autorisation : concepts g\\xE9n\\xE9raux\"), mdx(\"p\", null, \"Les JWT sont parfaits pour la cr\\xE9ation de RESTful APIs, car ils permettent de mettre en place\\nun m\\xE9canisme d\\u2019authentification et autorisation \\xAB stateless \\xBB pour le backend.\"), mdx(\"br\", null), mdx(\"p\", null, \"Le client va s\\u2019authentifier et donc obtenir un JWT g\\xE9n\\xE9r\\xE9 par l\\u2019API lors de son enregistrement\\n(\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"auths/register\"), \") ou lors de son login (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"auths/login\"), \").\"), mdx(\"p\", null, \"Le JWT g\\xE9n\\xE9r\\xE9 par l\\u2019API contient 3 parties :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Un header : il est encod\\xE9 en base64 indiquant l\\u2019algorithme de la signature du token.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Un payload : il est encod\\xE9 en base64, il contient g\\xE9n\\xE9ralement des donn\\xE9es permettant\\nd\\u2019identifier l\\u2019utilisateur faisant la requ\\xEAte. Ces donn\\xE9es ne sont pas secr\\xE8tes\\n(le payload n\\u2019est pas crypt\\xE9 !)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Une signature : elle est hach\\xE9e selon l\\u2019algorithme sp\\xE9cifi\\xE9 dans le header.\\nLa signature permet de v\\xE9rifier que le token n\\u2019a pas \\xE9t\\xE9 modifi\\xE9, et donc,\\nde mettre en place un m\\xE9canisme d\\u2019autorisation d\\u2019acc\\xE8s aux op\\xE9rations d\\u2019une API.\")), mdx(\"br\", null), mdx(\"p\", null, \"Tout client souhaitant acc\\xE9der \\xE0 des op\\xE9rations n\\xE9cessitant une autorisation via JWT devra fournir\\nun JWT dans le header de sa requ\\xEAte.\\nPour ce faire, le client m\\xE9morisera g\\xE9n\\xE9ralement le JWT re\\xE7u lors de son authentification.\\nTypiquement, le JWT re\\xE7u par un client est enregistr\\xE9 dans le Web Storage de son browser ou dans un cookie.\"), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionD\"\n  }), \"d) Authentification et cr\\xE9ation de token JWT\"), mdx(\"h2\", null, \"d.1) Ajout de la d\\xE9pendance java-jwt\"), mdx(\"p\", null, \"Tant pour la cr\\xE9ation que la v\\xE9rification d\\u2019un token, nous utiliserons la librairie java-jwt :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/auth0/java-jwt\"\n  }, \"https://github.com/auth0/java-jwt\")), mdx(\"p\", null, \"Pour utiliser cette librairie, ajoutez une d\\xE9pendance \\xE0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"java-jwt\"), \" :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Via IntelliJ : \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cliquez au sein de votre fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \" : \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Generate...\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Dependency\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tapez : \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"java-jwt\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installez les d\\xE9pendances Maven en cliquant sur le bouton repr\\xE9sentant \\\"\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Load Maven Changes\"), \"\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NB : si IntelliJ ne trouve pas votre d\\xE9pendance, et que le num\\xE9ro de version est mis en rouge\\ndans \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \", vous pouvez probablement r\\xE9soudre cela en faisant un clic droit sur votre\\n\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maven\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Reload project\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Si vous n'avez pas IntelliJ, ajoutez cela au sein de \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \" puis forcer l'installation des d\\xE9pendances :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markup\"\n  }, \"<dependency>\\n            <groupId>com.auth0</groupId>\\n            <artifactId>java-jwt</artifactId>\\n            <version>3.18.2</version>\\n</dependency>\\n\")), mdx(\"br\", null), mdx(\"h2\", null, \"d.2) Cr\\xE9ation du token JWT\"), mdx(\"h3\", null, \"d.2.1) Introduction\"), mdx(\"p\", null, \"Un token JWT doit \\xEAtre cr\\xE9\\xE9 lors de l'authentification d'un utilisateur, au login ou \\xE0\\nl'enregistrement de celui-ci.\"), mdx(\"p\", null, \"Nous allons donc cr\\xE9er les op\\xE9rations \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"login\"), \" et \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"register\"), \" pour des ressources de type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Pour ce faire, voici les \\xE9tapes que nous allons suivre :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ajout d'une propri\\xE9t\\xE9 pour g\\xE9rer le secret associ\\xE9 \\xE0 la signature des tokens.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cr\\xE9ation d'une classe \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"User\"), \" qui va permettre de s\\xE9rialiser les donn\\xE9es du monde Java vers\\nle monde JSON.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cr\\xE9ation d'une classe \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"UserDataService\"), \" qui va permettre de g\\xE9rer les donn\\xE9es associ\\xE9es aux\\nutilisateurs et qui va offrir les services d'acc\\xE8s aux donn\\xE9es et la logique pour le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"login\"), \"\\net le \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"register\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cr\\xE9ation d'une Root Resource \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AuthsResource\"), \" qui va s'occuper de g\\xE9rer la pr\\xE9sentation des\\nressources aux clients.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Am\\xE9lioration de la classe \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Json\"), \" qui s'occupe de la persistance des donn\\xE9es afin que l'on\\npuisse parser n'importe quelle collection de donn\\xE9es. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test des op\\xE9rations de \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"login\"), \" et \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"register\"), \".\")), mdx(\"br\", null), mdx(\"h3\", null, \"d.2.2) Propri\\xE9t\\xE9 associ\\xE9e au secret utilis\\xE9 pour la signature\"), mdx(\"p\", null, \"Veuillez ajouter le secret permettant de signer les token au sein de votre fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dev.properties\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\",\n    \"metastring\": \"{3}\",\n    \"{3}\": true\n  }, \"BaseUri=http://localhost:8080/\\nDatabaseFilePath=db.json\\nJWTSecret=ilovefilms\\n\")), mdx(\"br\", null), mdx(\"h3\", null, \"d.2.3) Cr\\xE9ation des objets du domaine\"), mdx(\"p\", null, \"Veuillez ajouter la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User\"), \" au package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"domain\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"package be.vinci.domain;\\n\\npublic class User {\\n\\n    private int id;\\n\\n    private String login;\\n\\n    private String password;\\n\\n    public String getLogin() {\\n        return login;\\n    }\\n\\n    public void setLogin(String login) {\\n        this.login = login;\\n    }\\n\\n    public int getId() {\\n        return id;\\n    }\\n\\n    public void setId(int id) {\\n        this.id = id;\\n    }\\n\\n    public String getPassword() {\\n        return password;\\n    }\\n\\n    public void setPassword(String password) {\\n        this.password = password;\\n    }\\n\\n    public boolean checkPassword(String password) {\\n        return this.password.equals(password);\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return \\\"{id:\\\" + id + \\\", login:\\\" + login + \\\", password:\\\" + password + \\\"}\\\";\\n    }\\n\\n}\\n\")), mdx(\"br\", null), mdx(\"h3\", null, \"d.2.4) Cr\\xE9ation du service de donn\\xE9es associ\\xE9 aux utilisateurs\"), mdx(\"p\", null, \"Nous souhaitons cr\\xE9er une classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UserDataService\"), \" qui va permettre :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"de g\\xE9rer les donn\\xE9es associ\\xE9es aux utilisateurs ;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"d'offrir les cas d'utilisation \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"login\"), \" et \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"register\"), \".\")), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez ajouter cette classe dans le package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"services\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"numbered {16,57-58,84-85}\",\n    \"numbered\": true,\n    \"{16,57-58,84-85}\": true\n  }, \"package be.vinci.services;\\n\\nimport be.vinci.domain.User;\\nimport be.vinci.services.utils.Json;\\nimport be.vinci.utils.Config;\\nimport com.auth0.jwt.JWT;\\nimport com.auth0.jwt.algorithms.Algorithm;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.fasterxml.jackson.databind.node.ObjectNode;\\n\\nimport java.util.List;\\n\\npublic class UserDataService {\\n    private static final String COLLECTION_NAME = \\\"users\\\";\\n    private static Json<User> jsonDB = new Json<>();\\n    private final Algorithm jwtAlgorithm = Algorithm.HMAC256(Config.getProperty(\\\"JWTSecret\\\"));\\n    private final ObjectMapper jsonMapper = new ObjectMapper();\\n\\n\\n    public List<User> getAll() {\\n        var items = jsonDB.parse(COLLECTION_NAME);\\n        return items;\\n    }\\n\\n\\n    public User getOne(int id) {\\n        var items = jsonDB.parse(COLLECTION_NAME);\\n        return items.stream().filter(item -> item.getId() == id).findAny().orElse(null);\\n    }\\n\\n    public User getOne(String login) {\\n        var items = jsonDB.parse(COLLECTION_NAME);\\n        return items.stream().filter(item -> item.getLogin().equals(login)).findAny().orElse(null);\\n    }\\n\\n    public User createOne(User item) {\\n        var items = jsonDB.parse(COLLECTION_NAME);\\n        item.setId(nextItemId());\\n        items.add(item);\\n        jsonDB.serialize(items, COLLECTION_NAME);\\n        return item;\\n    }\\n\\n    public int nextItemId() {\\n        var items = jsonDB.parse(COLLECTION_NAME);\\n        if (items.size() == 0)\\n            return 1;\\n        return items.get(items.size() - 1).getId() + 1;\\n    }\\n\\n    public ObjectNode login(String login, String password) {\\n        User user = getOne(login);\\n        if (user == null || !user.checkPassword(password))\\n            return null;\\n        String token;\\n        try {\\n            token = JWT.create().withIssuer(\\\"auth0\\\")\\n                    .withClaim(\\\"user\\\", user.getId()).sign(this.jwtAlgorithm);\\n            ObjectNode publicUser = jsonMapper.createObjectNode()\\n                    .put(\\\"token\\\", token)\\n                    .put(\\\"id\\\", user.getId())\\n                    .put(\\\"login\\\", user.getLogin());\\n            return publicUser;\\n\\n        } catch (Exception e) {\\n            System.out.println(\\\"Unable to create token\\\");\\n            return null;\\n        }\\n    }\\n\\n    public ObjectNode register(String login, String password) {\\n        User tempUser = getOne(login);\\n        if (tempUser != null) // the user already exists !\\n            return null;\\n        tempUser = new User();\\n        tempUser.setLogin(login);\\n        tempUser.setPassword(password);\\n\\n        User user = createOne(tempUser);\\n        if (user == null)\\n            return null;\\n        String token;\\n        try {\\n            token = JWT.create().withIssuer(\\\"auth0\\\")\\n                    .withClaim(\\\"user\\\", user.getId()).sign(this.jwtAlgorithm);\\n            ObjectNode publicUser = jsonMapper.createObjectNode()\\n                    .put(\\\"token\\\", token)\\n                    .put(\\\"id\\\", user.getId())\\n                    .put(\\\"login\\\", user.getLogin());\\n            return publicUser;\\n\\n        } catch (Exception e) {\\n            System.out.println(\\\"Unable to create token\\\");\\n            return null;\\n        }\\n    }\\n\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Voici quelques explications concernant les token (d'autres explications portant sur les param\\xE8tres\\nde requ\\xEAte et la pr\\xE9paration des r\\xE9ponses seront donn\\xE9es plus tard) :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ligne 16 : on configure l'algorithme qui sera utilis\\xE9 pour la signature du token sur base du\\nsecret se trouvant dans \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"dev.properties\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lignes 57-58 & 84-85 : on g\\xE9n\\xE8re un token et l'on ajoute juste l'\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"id\"), \" de l'utilisateur\\ndans le payload.\")), mdx(\"br\", null), mdx(\"h3\", null, \"d.2.4) Cr\\xE9ation de la Root Resource \\\"User\\\"\"), mdx(\"p\", null, \"Veuillez ajouter cette classe dans le package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"package be.vinci.api;\\n\\nimport be.vinci.services.UserDataService;\\nimport com.fasterxml.jackson.databind.JsonNode;\\nimport com.fasterxml.jackson.databind.node.ObjectNode;\\nimport jakarta.inject.Singleton;\\nimport jakarta.ws.rs.*;\\nimport jakarta.ws.rs.core.MediaType;\\nimport jakarta.ws.rs.core.Response;\\n\\n@Singleton\\n@Path(\\\"/auths\\\")\\npublic class AuthsResource {\\n\\n    private UserDataService myUserDataService = new UserDataService();\\n\\n    @POST\\n    @Path(\\\"login\\\")\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public ObjectNode login(JsonNode json) {\\n        // Get and check credentials\\n        if (!json.hasNonNull(\\\"login\\\") || !json.hasNonNull(\\\"password\\\")) {\\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\\n                    .entity(\\\"login or password required\\\").type(\\\"text/plain\\\").build());\\n        }\\n        String login = json.get(\\\"login\\\").asText();\\n        String password = json.get(\\\"password\\\").asText();\\n\\n        // Try to login\\n        ObjectNode publicUser = myUserDataService.login(login, password);\\n        if (publicUser == null) {\\n            throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED)\\n                    .entity(\\\"Login or password incorrect\\\").type(MediaType.TEXT_PLAIN)\\n                    .build());\\n        }\\n        return publicUser;\\n\\n    }\\n\\n    @POST\\n    @Path(\\\"register\\\")\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public ObjectNode register(JsonNode json) {\\n        // Get and check credentials\\n        if (!json.hasNonNull(\\\"login\\\") || !json.hasNonNull(\\\"password\\\")) {\\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\\n                    .entity(\\\"login or password required\\\").type(\\\"text/plain\\\").build());\\n        }\\n        String login = json.get(\\\"login\\\").asText();\\n        String password = json.get(\\\"password\\\").asText();\\n\\n        // Try to login\\n        ObjectNode publicUser = myUserDataService.register(login, password);\\n        if (publicUser == null) {\\n            throw new WebApplicationException(Response.status(Response.Status.CONFLICT)\\n                    .entity(\\\"this resource already exists\\\").type(MediaType.TEXT_PLAIN)\\n                    .build());\\n        }\\n        return publicUser;\\n\\n    }\\n\\n}\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Le service de donn\\xE9es s'occupant des utilisateurs fournit, lors du login et du register,\\nun \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjectNode\"), \" qui contient l'id, le login et le token d'un utilisateur. \"), mdx(\"br\", null), mdx(\"h3\", null, \"d.2.5) Am\\xE9lioration de la classe g\\xE9n\\xE9rique Json\"), mdx(\"p\", null, \"La classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" actuellement ne parse que des donn\\xE9es vers le type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Film\"), \".\"), mdx(\"p\", null, \"Or on souhaiterait pouvoir charger n'importe quelle collection de donn\\xE9es et \\xE9crire cela pour\\nretourner une \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List<T>\"), \" (une liste param\\xE9tr\\xE9e vers le type pass\\xE9 \\xE0 la classe g\\xE9n\\xE9rique \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \") :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"return jsonMapper.readerForListOf(type).readValue(collection);\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"On aimerait donc faire en sorte que \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"type\"), \", dans le code donn\\xE9 ci-dessus, valent le type\\npass\\xE9 \\xE0 la classe g\\xE9n\\xE9rique. La difficult\\xE9 pour y arriver, c'est que les \\\"generics\\\" en Java\\nsont principalement d\\xE9termin\\xE9s \\xE0 la compilation. Cela signifie que l'information est perdue \\xE0\\nl'ex\\xE9cution (le type param\\xE9tr\\xE9 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"T\"), \" un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Object\"), \").\\nPour obtenir l'information associ\\xE9 au type pass\\xE9 \\xE0 la classe g\\xE9n\\xE9rique, lors de l'ex\\xE9cution,\\nil faut ajouter un argument \\xE0 une fonction.\"), mdx(\"p\", null, \"Ici, on a choisi d'ajouter le type au constructor.\\nVoici donc les mises \\xE0 jour de la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" en surlign\\xE9 : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"numbered {5-11,50}\",\n    \"numbered\": true,\n    \"{5-11,50}\": true\n  }, \"public class Json<T> {\\n    private static final String DB_FILE_PATH = Config.getProperty(\\\"DatabaseFilePath\\\");\\n    private static Path pathToDb = Paths.get(DB_FILE_PATH);\\n    private final static ObjectMapper jsonMapper = new ObjectMapper();\\n    private Class<T> type ;\\n\\n    // Java generics are mostly compile time, this means that the type information is lost at runtime.\\n    // To get the type information at runtime you have to add it as an argument of the constructor.\\n    public Json(Class<T> type){\\n        this.type = type;\\n    }\\n\\n\\n    public void serialize(List<T> items, String collectionName) {\\n        try {\\n            // if no DB file, write a new collection to a new db file\\n            if (!Files.exists(pathToDb)) {\\n                // Create an object and add a JSON array as POJO, e.g. { items:[...]}\\n                ObjectNode newCollection = jsonMapper.createObjectNode().putPOJO(collectionName, items);\\n                jsonMapper.writeValue(pathToDb.toFile(), newCollection); // write the JSON Object in the DB file\\n                return;\\n            }\\n            // get all collections : can be read as generic JsonNode, if it can be Object or Array;\\n            JsonNode allCollections = jsonMapper.readTree(pathToDb.toFile()); // e.g. { users:[...], items:[...]}\\n            // remove current collection, e.g. remove the array of items\\n            if (allCollections.has(collectionName)) {\\n                ((ObjectNode) allCollections).remove(collectionName); //e.g. it leaves { users:[...]}\\n            }\\n            // Prepare a JSON array from the list of POJOs for the collection to be updated, e.g. [{\\\"film1\\\",...}, ...]\\n            ArrayNode updatedCollection = jsonMapper.valueToTree(items);\\n            // Add the JSON array in allCollections, e.g. : { users:[...], items:[...]}\\n            ((ObjectNode) allCollections).putArray(collectionName).addAll(updatedCollection);\\n            // write to the db file allCollections\\n            jsonMapper.writeValue(pathToDb.toFile(), allCollections);\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n    public List<T> parse(String collectionName) {\\n        try {\\n            // get allCollections\\n            JsonNode node = jsonMapper.readTree(pathToDb.toFile());\\n            // accessing value of the specified field of an object node,\\n            // e.g. the JSON array within \\\"items\\\" field of { users:[...], items:[...]}\\n            JsonNode collection = node.get(collectionName);\\n            if (collection == null) // Send an empty list if there is not the requested collection\\n                return (List<T>) new ArrayList<T>();\\n            // convert the JsonNode to a List of POJOs & return it\\n            return jsonMapper.readerForListOf(type).readValue(collection);\\n        } catch (FileNotFoundException e) {\\n            return (List<T>) new ArrayList<T>(); // send an empty list if there is no db file\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n            return (List<T>) new ArrayList<T>();\\n        }\\n    }\\n\\n}\\n\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Il ne reste plus qu'\\xE0 modifier la cr\\xE9ation des instances de la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Json\"), \" pour passer\\nl'information du type \\xE0 l'ex\\xE9cution.\"), mdx(\"p\", null, \"Veuillez mettre \\xE0 jour cette ligne de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmDataService\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{3}\",\n    \"{3}\": true\n  }, \"public class FilmDataService {\\n    private static final String COLLECTION_NAME = \\\"films\\\";\\n    private static Json<Film> jsonDB = new Json<>(Film.class);\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez aussi mettre \\xE0 jour cette ligne de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UserDataService\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{3}\",\n    \"{3}\": true\n  }, \"public class UserDataService {\\n    private static final String COLLECTION_NAME = \\\"users\\\";\\n    private static Json<User> jsonDB = new Json<>(User.class);\\n\")), mdx(\"br\", null), mdx(\"h3\", null, \"d.2.6) Test des op\\xE9rations de login et de register\"), mdx(\"p\", null, \"Veuillez tester les deux nouvelles op\\xE9rations ajout\\xE9es.\\nPour ce faire, \\xE0 l'aide d'InteliJ, ajoutez le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"users.http\"), \" \\xE0 votre module ou\\nprojet (dans le r\\xE9pertoire \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"requests\"), \" par exemple) avec ces requ\\xEAtes :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-http-requests\"\n  }, \"### Register one default user\\nPOST {{baseUrl}}/auths/register\\nContent-Type: application/json\\n\\n{\\n  \\\"login\\\":\\\"james\\\",\\n  \\\"password\\\":\\\"password\\\"\\n}\\n\\n### Login with default user credentials\\nPOST {{baseUrl}}/auths/login\\nContent-Type: application/json\\n\\n{\\n  \\\"login\\\":\\\"james\\\",\\n  \\\"password\\\":\\\"password\\\"\\n}\\n\\n### Register john\\nPOST {{baseUrl}}/auths/register\\nContent-Type: application/json\\n\\n{\\n  \\\"login\\\":\\\"john\\\",\\n  \\\"password\\\":\\\"123\\\"\\n}\\n\\n### Login with John credentials\\nPOST {{baseUrl}}/auths/login\\nContent-Type: application/json\\n\\n{\\n  \\\"login\\\":\\\"john\\\",\\n  \\\"password\\\":\\\"123\\\"\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Il ne vous reste plus qu'\\xE0 ex\\xE9cuter votre RESTful API et ex\\xE9cuter les requ\\xEAtes pour voir que\\nl'API vous renvoie bien des tokens.\"), mdx(\"p\", null, \"Si vous n'utilisez pas IntelliJ, mais plut\\xF4t VS Code, il suffit juste de rajouter la variable\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"baseUrl\"), \" \\xE0 votre script \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"auths.http\"), \".\"), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionE\"\n  }), \"e) Utilisation de jbcrypt pour g\\xE9rer les passwords\"), mdx(\"p\", null, \"Tant pour hasher un password que pour le v\\xE9rifier, nous utiliserons la librairie jbcrype :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mindrot.org/projects/jBCrypt/\"\n  }, \"https://www.mindrot.org/projects/jBCrypt/\")), mdx(\"p\", null, \"Pour utiliser cette librairie, ajoutez une d\\xE9pendance \\xE0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"jbcrypt\"), \" :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Via IntelliJ : \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cliquez au sein de votre fichier \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \" : \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Generate...\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Dependency\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tapez : \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"jbcrypt\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Installez les d\\xE9pendances Maven en cliquant sur le bouton repr\\xE9sentant \\\"\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Load Maven Changes\"), \"\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NB : si IntelliJ ne trouve pas votre d\\xE9pendance, et que le num\\xE9ro de version est mis en rouge\\ndans \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \", vous pouvez probablement r\\xE9soudre cela en faisant un clic droit sur votre\\n\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Maven\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Reload project\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Si vous n'avez pas IntelliJ, ajoutez cela au sein de \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pom.xml\"), \" puis forcer l'installation des d\\xE9pendances :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-markup\"\n  }, \"<dependency>\\n            <groupId>org.mindrot</groupId>\\n            <artifactId>jbcrypt</artifactId>\\n            <version>0.4</version>\\n</dependency>\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Nous allons mettre \\xE0 jour la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"User\"), \" afin d'offrir la fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"hashPassword\"), \" et\\nmettre \\xE0 jour la fonction \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"checkPassword\"), \" : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public boolean checkPassword(String password) {\\n    return BCrypt.checkpw(password, this.password);\\n}\\n\\npublic String hashPassword(String password) {\\n    return BCrypt.hashpw(password, BCrypt.gensalt());\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Attention, maintenant que nous utilisons les passwords hach\\xE9s, il faut supprimer l'ancienne base\\nde donn\\xE9e des utilisateurs. Vous devez soit effacer la collection \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"users\"), \" du fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"db.json\"), \",\\nsoit vous pouvez aussi directement effacer le fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"db.json\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Il ne reste plus qu'\\xE0 modifier l\\xE9g\\xE9rement \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UserDataService\"), \" afin d'enregistrer les passwords\\nhach\\xE9s : veuillez mettre \\xE0 jour la ligne surlign\\xE9e de la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"register\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{7}\",\n    \"{7}\": true\n  }, \"public ObjectNode register(String login, String password) {\\n        User tempUser = getOne(login);\\n        if (tempUser != null) // the user already exists !\\n            return null;\\n        tempUser = new User();\\n        tempUser.setLogin(login);\\n        tempUser.setPassword(tempUser.hashPassword(password));\\n\")), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionF\"\n  }), \"f) Autorisation JWT, filtres, providers & \\\"Name binding\\\"\"), mdx(\"h2\", null, \"f.1) V\\xE9rification d'un token : concepts g\\xE9n\\xE9raux\"), mdx(\"p\", null, \"La v\\xE9rification d\\u2019un token n\\u2019est n\\xE9cessaire que pour les op\\xE9rations sur les ressources\\nqui doivent \\xEAtre prot\\xE9g\\xE9es (ou autoris\\xE9es).\"), mdx(\"p\", null, \"Le code g\\xE9n\\xE9rique pour v\\xE9rifier un token est donn\\xE9 ici :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/auth0/java-jwt#verify-a-token\"\n  }, \"https://github.com/auth0/java-jwt#verify-a-token\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Il serait peu int\\xE9ressant de devoir r\\xE9impl\\xE9menter ce code pour chaque op\\xE9ration n\\xE9cessitant\\nune autorisation JWT.\"), mdx(\"br\", null), mdx(\"p\", null, \"Ce que nous souhaitons, c\\u2019est :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pouvoir annoter chaque m\\xE9thode d\\u2019une Root Resource devant \\xEAtre autoris\\xE9e par JWT :\\nnous choisissons l\\u2019annotation \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"@Authorize\"), \" pour notre API de gestion de films ;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Appeler le morceau de code s\\u2019occupant de v\\xE9rifier un JWT pour chaque m\\xE9thode annot\\xE9e de \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"@Authorize\"), \" :\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"si le JWT re\\xE7u au sein du header de la requ\\xEAte est OK, nous nous occupons de charger\\nl\\u2019utilisateur ayant fait la requ\\xEAte dans un container associ\\xE9 \\xE0 la requ\\xEAte du client,\\nvia la cl\\xE9 \\\"user\\\" ; ensuite, le code de la m\\xE9thode annot\\xE9e par \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"@Authorize\"), \" est ex\\xE9cut\\xE9 ;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"si le JWT re\\xE7u au sein du header n\\u2019est pas v\\xE9rifi\\xE9 avec succ\\xE8s, nous envoyons un code\\nd\\u2019erreur au client ; le code de la m\\xE9thode annot\\xE9e par \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"@Authorize\"), \" ne sera donc pas ex\\xE9cut\\xE9.\")))), mdx(\"br\", null), mdx(\"p\", null, \"NB : Pour certains d'entre vous, cela pourrait vous rappellera la cr\\xE9ation et l\\u2019utilisation\\nd\\u2019un middleware \\xAB authorize \\xBB dans le monde de Node.js / Express.\"), mdx(\"br\", null), mdx(\"p\", null, \"Au sein d\\u2019une application JAX-RS, les filtres \\xAB serveurs \\xBB permettent de modifier\\nles requ\\xEAtes ou les r\\xE9ponses, soit pour toutes les requ\\xEAtes, soit pour seulement certaines\\nm\\xE9thodes\\u2026 \"), mdx(\"p\", null, \"La suite fournit un r\\xE9sum\\xE9 de comment mettre en place un filtre \\xAB serveur \\xBB pour toutes\\nles m\\xE9thodes contenant une annotation personnelle, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Authorize\"), \" dans la d\\xE9mo.\"), mdx(\"br\", null), mdx(\"h2\", null, \"f.2) Filtres, providers & \\xAB Name binding \\xBB\"), mdx(\"p\", null, \"Il est possible de cr\\xE9er toutes sortes de filtres pour modifier soit les requ\\xEAtes,\\nsoit les r\\xE9ponses d\\u2019une application JAX-RS. \"), mdx(\"br\", null), mdx(\"p\", null, \"Si vous souhaitez des d\\xE9tails en plus du r\\xE9sum\\xE9 pr\\xE9sent\\xE9 par la suite, les filtres sont expliqu\\xE9s dans le manuel de Jersey :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest3x/filters-and-interceptors.html\"\n  }, \"https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest3x/filters-and-interceptors.html\")), mdx(\"br\", null), mdx(\"p\", null, \"Les filtres \\xAB serveurs \\xBB sont illustr\\xE9 au sein de cette section via la mise en place\\nd\\u2019un filtre de requ\\xEAtes permettant principalement de filtrer toutes les requ\\xEAtes qui\\nne seraient pas autoris\\xE9es (lorsque le JWT re\\xE7u n\\u2019est pas valide).\"), mdx(\"br\", null), mdx(\"p\", null, \"Afin d\\u2019ex\\xE9cuter le traitement d\\u2019autorisation JWT pour chaque m\\xE9thode annot\\xE9e de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Authorize\"), \",\\nnous allons utiliser un objet de type \\xAB filtre de requ\\xEAte \\xBB qui h\\xE9rite de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContainerRequestFilter\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez ajouter un package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filters\"), \" au sein du package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"api\"), \" et y cr\\xE9er la classe\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthorizationRequestFilter\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"package be.vinci.api.filters;\\n\\nimport java.io.IOException;\\n\\nimport be.vinci.domain.User;\\nimport be.vinci.services.UserDataService;\\nimport be.vinci.utils.Config;\\nimport com.auth0.jwt.JWT;\\nimport com.auth0.jwt.algorithms.Algorithm;\\nimport com.auth0.jwt.interfaces.DecodedJWT;\\nimport com.auth0.jwt.interfaces.JWTVerifier;\\nimport jakarta.inject.Singleton;\\nimport jakarta.ws.rs.WebApplicationException;\\nimport jakarta.ws.rs.container.ContainerRequestContext;\\nimport jakarta.ws.rs.container.ContainerRequestFilter;\\nimport jakarta.ws.rs.core.Response;\\nimport jakarta.ws.rs.core.Response.Status;\\nimport jakarta.ws.rs.ext.Provider;\\n\\n@Singleton\\n@Provider\\n@Authorize\\npublic class AuthorizationRequestFilter implements ContainerRequestFilter {\\n    private final Algorithm jwtAlgorithm = Algorithm.HMAC256(Config.getProperty(\\\"JWTSecret\\\"));\\n    private final JWTVerifier jwtVerifier = JWT.require(this.jwtAlgorithm).withIssuer(\\\"auth0\\\").build();\\n    private UserDataService myUserDataService = new UserDataService();\\n\\n    @Override\\n    public void filter(ContainerRequestContext requestContext) throws IOException {\\n        String token = requestContext.getHeaderString(\\\"Authorization\\\");\\n        if (token == null) {\\n            requestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED)\\n                    .entity(\\\"A token is needed to access this resource\\\").build());\\n        } else {\\n            DecodedJWT decodedToken = null;\\n            try {\\n                decodedToken = this.jwtVerifier.verify(token);\\n            } catch (Exception e) {\\n                throw new WebApplicationException(Response.status(Status.UNAUTHORIZED)\\n                        .entity(\\\"Malformed token : \\\" + e.getMessage()).type(\\\"text/plain\\\").build());\\n            }\\n            User authenticatedUser = myUserDataService.getOne(decodedToken.getClaim(\\\"user\\\").asInt());\\n            if (authenticatedUser == null) {\\n                requestContext.abortWith(Response.status(Status.FORBIDDEN)\\n                        .entity(\\\"You are forbidden to access this resource\\\").build());\\n            }\\n\\n            requestContext.setProperty(\\\"user\\\",\\n                    myUserDataService.getOne(decodedToken.getClaim(\\\"user\\\").asInt()));\\n        }\\n    }\\n\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthorizationRequestFilter\"), \" va v\\xE9rifier le JWT : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"S\\u2019il n\\u2019est pas OK, la requ\\xEAte est \\xAB avort\\xE9e \\xBB en appelant \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"abortWith\"), \" et en\\nfournissant le code d\\u2019erreur ainsi qu\\u2019un message d\\u2019erreur au client. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Si le JWT est OK, le claim \\\"user\\\" mis dans le payload du JWT,\\nqui en fait est l\\u2019id de l\\u2019utilisateur, est utilis\\xE9 pour ajouter l\\u2019utilisateur \\xE0 la requ\\xEAte\\n( l'utilisateur est r\\xE9cup\\xE9r\\xE9 en faisant appel \\xE0 la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"getOne\"), \" du service des donn\\xE9es\\ndes utilisateurs) sous la cl\\xE9 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"user\"), \".\\nEnsuite, la m\\xE9thode de la ressource annot\\xE9e par \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"@Authorize\"), \" est ex\\xE9cut\\xE9e,\\nafin de pr\\xE9parer la r\\xE9ponse au client.\", mdx(\"br\", null))), mdx(\"p\", null, \"La notion de provider est d\\xE9finie dans la sp\\xE9cification de JAX-RS :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html#providers\"\n  }, \"https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html#providers\"), \" \"), mdx(\"br\", null), mdx(\"p\", null, \"En r\\xE9sum\\xE9, un provider permet de filtrer les requ\\xEAtes, convertir des repr\\xE9sentations\\n(XML, JSON\\u2026) vers des objets Java, mapper des exceptions \\xE0 des r\\xE9ponses\\u2026 \"), mdx(\"p\", null, \"Il existe de nombreux providers pr\\xE9d\\xE9finis qui sont fournis dans Jersey. \"), mdx(\"p\", null, \"L\\u2019annotation \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Provider\"), \" permet de fournir notre propre impl\\xE9mentation d\\u2019un provider,\\nde la rendre disponible \\xE0 l\\u2019ex\\xE9cution \\xE0 notre application JAX-RS.\"), mdx(\"br\", null), mdx(\"p\", null, \"Un filtre peut \\xEAtre li\\xE9 \\xE0 un nom, ce que l\\u2019on appelle \\xAB \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name binding\"), \" \\xBB. \"), mdx(\"p\", null, \"A l\\u2019ex\\xE9cution d\\u2019une application JAX-RS, on pourra sp\\xE9cifier que le filtre sera ex\\xE9cut\\xE9\\nseulement pour certaines m\\xE9thodes.\"), mdx(\"p\", null, \"NB : les filtres peuvent ne pas \\xEAtre limit\\xE9s, on les appelle alors filtre globaux.\"), mdx(\"br\", null), mdx(\"p\", null, \"Nous allons d\\xE9finir une annotation de type \\xAB \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Name binding\"), \" \\xBB via \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@NameBinding\"), \".\"), mdx(\"p\", null, \"Veuillez cr\\xE9er l'annotation \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Authorize\"), \" au sein du package \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"filters\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"package be.vinci.api.filters;\\n\\nimport jakarta.ws.rs.NameBinding;\\n\\nimport java.lang.annotation.Retention;\\nimport java.lang.annotation.RetentionPolicy;\\n\\n@NameBinding\\n@Retention(RetentionPolicy.RUNTIME)\\npublic @interface Authorize {\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"C\\u2019est gr\\xE2ce \\xE0 cette annotation qui a \\xE9t\\xE9 d\\xE9finie que \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthorizationRequestFilter\"), \"\\nne s\\u2019ex\\xE9cutera que pour les m\\xE9thodes annot\\xE9es de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Authorize\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Au sein de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmResource\"), \", il nous reste donc \\xE0 annoter les op\\xE9rations d'\\xE9criture de notre API de gestion de films afin de\\nles prot\\xE9ger par une autorisation JWT :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"numbered {43,54,70}\",\n    \"numbered\": true,\n    \"{43,54,70}\": true\n  }, \"package be.vinci.api;\\n\\nimport be.vinci.api.filters.Authorize;\\nimport be.vinci.domain.Film;\\nimport be.vinci.domain.User;\\nimport be.vinci.services.FilmDataService;\\nimport jakarta.inject.Singleton;\\nimport jakarta.ws.rs.*;\\nimport jakarta.ws.rs.core.Context;\\nimport jakarta.ws.rs.core.MediaType;\\nimport jakarta.ws.rs.core.Response;\\nimport org.glassfish.jersey.server.ContainerRequest;\\n\\nimport java.util.List;\\n\\n@Singleton\\n@Path(\\\"films\\\")\\npublic class FilmResource {\\n\\n    private FilmDataService myFilmDataService = new FilmDataService();\\n\\n    @GET\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public List<Film> getAll(@DefaultValue(\\\"-1\\\") @QueryParam(\\\"minimum-duration\\\") int minimumDuration) {\\n        return myFilmDataService.getAll(minimumDuration);\\n    }\\n\\n\\n    @GET\\n    @Path(\\\"/{id}\\\")\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public Film getOne(@PathParam(\\\"id\\\") int id) {\\n        Film filmFound = myFilmDataService.getOne(id);\\n        if (filmFound == null)\\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\\n                    .entity(\\\"Ressource not found\\\").type(\\\"text/plain\\\").build());\\n        return filmFound;\\n    }\\n\\n    @POST\\n    @Produces(MediaType.APPLICATION_JSON)\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    @Authorize\\n    public Film createOne(Film film, @Context ContainerRequest request) {\\n        if (film == null || film.getTitle() == null || film.getTitle().isBlank())\\n            throw new WebApplicationException(\\n                    Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory info\\\").type(\\\"text/plain\\\").build());\\n        return myFilmDataService.createOne(film);\\n    }\\n\\n    @DELETE\\n    @Path(\\\"/{id}\\\")\\n    @Produces(MediaType.APPLICATION_JSON)\\n    @Authorize\\n    public Film deleteOne(@PathParam(\\\"id\\\") int id) {\\n        if (id == 0) // default value of an integer => has not been initialized\\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory id info\\\")\\n                    .type(\\\"text/plain\\\").build());\\n        Film deletedFilm = myFilmDataService.deleteOne(id);\\n        if (deletedFilm == null)\\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\\n                    .entity(\\\"Ressource not found\\\").type(\\\"text/plain\\\").build());\\n        return deletedFilm;\\n    }\\n\\n    @PUT\\n    @Path(\\\"/{id}\\\")\\n    @Produces(MediaType.APPLICATION_JSON)\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    @Authorize\\n    public Film updateOne(Film film, @PathParam(\\\"id\\\") int id) {\\n        if (id == 0 || film == null || film.getTitle() == null || film.getTitle().isBlank())\\n            throw new WebApplicationException(\\n                    Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory info\\\").type(\\\"text/plain\\\").build());\\n        Film updatedFilm = myFilmDataService.updateOne(film, id);\\n        if (updatedFilm == null)\\n            throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND)\\n                    .entity(\\\"Ressource not found\\\").type(\\\"text/plain\\\").build());\\n        return updatedFilm;\\n    }\\n\\n\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Comment peut-on r\\xE9cup\\xE9rer l\\u2019objet \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"user\"), \" mis dans la requ\\xEAte par le\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthorizationRequestFilter\"), \" ?\"), mdx(\"br\", null), mdx(\"p\", null, \"Voici un exemple en modifiant la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createOne\"), \" de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmResource\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{5-7}\",\n    \"{5-7}\": true\n  }, \"@POST\\n@Produces(MediaType.APPLICATION_JSON)\\n@Consumes(MediaType.APPLICATION_JSON)\\n@Authorize\\npublic Film createOne(Film film, @Context ContainerRequest request) {\\n    User authenticatedUser = (User) request.getProperty(\\\"user\\\");\\n    System.out.println(\\\"A new film is added by \\\" + authenticatedUser.getLogin() );\\n    if (film == null || film.getTitle() == null || film.getTitle().isBlank())\\n        throw new WebApplicationException(\\n                Response.status(Response.Status.BAD_REQUEST).entity(\\\"Lacks of mandatory info\\\").type(\\\"text/plain\\\").build());\\n    return myFilmDataService.createOne(film);\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"C\\u2019est l\\u2019appel de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"getProperty\"), \" sur un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ContainerRequest\"), \" qui permet de r\\xE9cup\\xE9rer\\nl\\u2019objet pr\\xE9par\\xE9 lors du traitement d\\u2019autorisation JWT (fait dans le filtre).\"), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionG\"\n  }), \"g) Envoi des requ\\xEAtes \\xE0 son API et JWT\"), mdx(\"h2\", null, \"g.1) Test de son API avec JWT\"), mdx(\"p\", null, \"Dans le cadre de ce cours, vous ne devez pas d\\xE9velopper de frontend (par exemple en HTML /\\nJavaScript / CSS) pour tester vos APIs. Cela prendrait trop de temps. \"), mdx(\"p\", null, \"Nous utilisons donc des clients l\\xE9gers permettant de faire des requ\\xEAtes \\xE0 nos APIs.\"), mdx(\"p\", null, \"Comme nous vous encourageons \\xE0 utiliser IntelliJ pour d\\xE9velopper votre code Java, il est probablement\\nplus ais\\xE9 de rester au sein du m\\xEAme environnement de d\\xE9veloppement en utilisant le client HTTP\\nd'IntelliJ.\"), mdx(\"br\", null), mdx(\"h2\", null, \"g.2) HTTP Client d'IntelliJ avec des JWT\"), mdx(\"p\", null, \"IntelliJ permet d'ajouter des scripts associ\\xE9s aux r\\xE9ponses de cette fa\\xE7on :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"GET host/api/test\\n\\n> {%\\n// Response Handler Script\\n...\\n%}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Les scripts g\\xE9rant les r\\xE9ponses aux requ\\xEAtes peuvent acc\\xE9der \\xE0 deux objets :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"client\"), \" : permet d'enregistrer des donn\\xE9es de session dans \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"client.global\"), \".\\nChaque variable que l'on sauve dans \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"client.global\"), \" en tant que \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"variable_name\"), \",\\nen appelant la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"set\"), \", sera accessible dans les requ\\xEAtes futures via \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"{{variable_name}}\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"response\"), \" : contient les infos de la r\\xE9ponse \\xE0 la requ\\xEAte (type, status, body...)\")), mdx(\"br\", null), mdx(\"p\", null, \"Voici le code permettant de tester l'API de gestion des films :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"### Read All films\\nGET {{baseUrl}}/films\\n\\n### Login the default user\\nPOST {{baseUrl}}/auths/login\\nContent-Type: application/json\\n\\n{\\n  \\\"login\\\":\\\"james\\\",\\n  \\\"password\\\":\\\"password\\\"\\n}\\n\\n> {%\\nclient.global.set(\\\"jamesToken\\\", response.body.token);\\n%}\\n\\n\\n### Create One film\\nPOST {{baseUrl}}/films\\nContent-Type: application/json\\nAuthorization: {{jamesToken}}\\n\\n{\\n  \\\"title\\\": \\\"Venom: Let There Be Carnage\\\",\\n  \\\"duration\\\": 9,\\n  \\\"budget\\\": 110,\\n  \\\"link\\\": \\\"https://en.wikipedia.org/wiki/Venom:_Let_There_Be_Carnage\\\"\\n}\\n\\n### Delete One film\\nDELETE {{baseUrl}}/films/5\\nAuthorization: {{jamesToken}}\\n\\n### Update One film\\nPUT {{baseUrl}}/films/4\\nContent-Type: application/json\\nAuthorization: {{jamesToken}}\\n\\n{\\n  \\\"title\\\": \\\"Venom: Let There Be Carnage\\\",\\n  \\\"duration\\\": 97,\\n  \\\"budget\\\": 110,\\n  \\\"link\\\": \\\"https://en.wikipedia.org/wiki/Venom:_Let_There_Be_Carnage\\\"\\n}\\n\\n### Create One film with dangerous characters\\nPOST {{baseUrl}}/films\\nContent-Type: application/json\\nAuthorization: {{jamesToken}}\\n\\n{\\n  \\\"title\\\": \\\"<img src=\\\\\\\"#\\\\\\\" onerror=\\\\\\\"alert('You have been hacked !')\\\\\\\">\\\",\\n  \\\"duration\\\": 9,\\n  \\\"budget\\\": 110,\\n  \\\"link\\\": \\\"https://en.wikipedia.org/wiki/Venom:_Let_There_Be_Carnage\\\"\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Plus d'information sur la gestion des r\\xE9ponses aux requ\\xEAtes via le client HTTP d'IntelliJ :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html#using-response-handler-scripts\"\n  }, \"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html#using-response-handler-scripts\")), mdx(\"br\", null), mdx(\"h2\", null, \"g.3) REST Client sous VS Code & JWT\"), mdx(\"p\", null, \"Quelques notions pour utiliser REST Client avec des JWT :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Il est possible de cr\\xE9er des \\xAB \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Request Variables\"), \" \\xBB afin de r\\xE9cup\\xE9rer la r\\xE9ponse associ\\xE9e\\n\\xE0 une requ\\xEAte au sein d\\u2019une variable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On va donc pouvoir r\\xE9cup\\xE9rer le token, suite \\xE0 une requ\\xEAte d\\u2019authentification,\\nau sein d\\u2019une \\xAB \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Request Variable\"), \" \\xBB, pour ensuite fournir ce token dans le\\n\\xAB \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Authorization header\"), \" \\xBB de toutes les requ\\xEAtes demandant une autorisation JWT.\", mdx(\"br\", null))), mdx(\"p\", null, \"Voici le script permettant de tester les op\\xE9rations sur les films :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-http-requests\"\n  }, \"@baseUrl = http://localhost:8080\\n\\n### Login the default user & define a Request Variable\\n# @name james\\nPOST {{baseUrl}}/auths/login\\nContent-Type: application/json\\n\\n{\\n  \\\"login\\\":\\\"james\\\",\\n  \\\"password\\\":\\\"password\\\"\\n}\\n### get the james' token in a File Variable\\n@jamesToken = {{james.response.body.token}}\\n\\n### Create One film\\nPOST {{baseUrl}}/films\\nContent-Type: application/json\\nAuthorization: {{jamesToken}}\\n\\n{\\n  \\\"title\\\" : \\\"Venom: Let There Be Carnage\\\",\\n  \\\"duration\\\" : 97,\\n  \\\"budget\\\" : 110,\\n  \\\"link\\\" : \\\"https://en.wikipedia.org/wiki/Venom:_Let_There_Be_Carnage\\\"\\n}\\n\\n### Read All films\\nGET {{baseUrl}}/films\\n\\n### Delete One film\\nDELETE {{baseUrl}}/films/5\\nAuthorization: {{admin.response.body.token}}\\n\\n### Update One film\\nPUT {{baseUrl}}/films/4\\nContent-Type: application/json\\nAuthorization: {{jamesToken}}\\n\\n{\\n  \\\"title\\\" : \\\"Venom: Let There Be Carnage\\\",\\n  \\\"duration\\\" : 97,\\n  \\\"budget\\\" : 110,\\n  \\\"link\\\" : \\\"https://en.wikipedia.org/wiki/Venom:_Let_There_Be_Carnage\\\"\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Plus de d\\xE9tails sur REST Client et ses fonctionnalit\\xE9s :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Huachao/vscode-restclient\"\n  }, \"https://github.com/Huachao/vscode-restclient\")), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionH\"\n  }), \"h) Gestion des requ\\xEAtes contenant des objets JSON quelconques\"), mdx(\"h2\", null, \"h.1) Introduction\"), mdx(\"p\", null, \"Dans le cadre du module 1, nous avons vu les moyens principaux de g\\xE9rer des requ\\xEAtes. \"), mdx(\"p\", null, \"Pour ce module-ci, nous avons \\xE9t\\xE9 en contact avec du code permettant :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"de r\\xE9cup\\xE9rer des informations JSON du body d\\u2019une requ\\xEAte sans passer par un POJO,\\nmais en utilisant un \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"JsonNode\"), \". \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"de retrouver le contexte d'une requ\\xEAte.\", mdx(\"br\", null))), mdx(\"p\", null, \"Nous allons maintenant expliquer les concepts associ\\xE9s.\"), mdx(\"br\", null), mdx(\"h2\", null, \"h.2) R\\xE9cup\\xE9ration des param\\xE8tres d'une requ\\xEAte d'un objet quelconque\"), mdx(\"p\", null, \"Nous allons souvent souhaiter r\\xE9cup\\xE9rer des donn\\xE9es qui ont \\xE9t\\xE9 envoy\\xE9es au format\\nJSON sein du body d\\u2019une requ\\xEAte client.\"), mdx(\"br\", null), mdx(\"p\", null, \"Dans le cas o\\xF9 ces donn\\xE9es ne correspondent pas \\xE0 un POJO, nous pouvons utiliser\\nun param\\xE8tre de type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JsonNode\"), \", et r\\xE9cup\\xE9rer les champs JSON via la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"get\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Admettons qu\\u2019une requ\\xEAte cliente envoie ce JSON : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n    \\\"login\\\":\\\"james\\\",\\n    \\\"password\\\":\\\"password\\\"\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"La m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"login\"), \" de la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthsResource\"), \" permet de r\\xE9cup\\xE9rer cet objet JSON\\net de le parser au sein de l\\u2019argument \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"json\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{5,11-12}\",\n    \"{5,11-12}\": true\n  }, \"@POST\\n@Path(\\\"login\\\")\\n@Consumes(MediaType.APPLICATION_JSON)\\n@Produces(MediaType.APPLICATION_JSON)\\npublic ObjectNode login(JsonNode json) {\\n    // Get and check credentials\\n    if (!json.hasNonNull(\\\"login\\\") || !json.hasNonNull(\\\"password\\\")) {\\n        throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\\n                .entity(\\\"login or password required\\\").type(\\\"text/plain\\\").build());\\n    }\\n    String login = json.get(\\\"login\\\").asText();\\n    String password = json.get(\\\"password\\\").asText();\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Il ne faut pas oublier de pr\\xE9ciser le type MIME de la requ\\xEAte qui sera consomm\\xE9e\\npar la m\\xE9thode, ici : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Consumes(MediaType.APPLICATION_JSON)\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"NB : Tout cela est possible car Jackson est bien configur\\xE9 au sein de\\nnotre application JAX-RS.\"), mdx(\"br\", null), mdx(\"h2\", null, \"h.3) Contexte et @Context\"), mdx(\"p\", null, \"JAX-RS fournit un moyen simple de b\\xE9n\\xE9ficier d\\u2019informations associ\\xE9es au contexte du\\nd\\xE9ploiement d\\u2019une application et du contexte de requ\\xEAtes individuelles. \"), mdx(\"p\", null, \"Ces informations sont disponibles pour les sous-classes d\\u2019Application, Root Resource Classes\\net les providers. C\\u2019est l\\u2019annotation \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Context\"), \" qui permet, par exemple, d\\u2019injecter\\nun provider au sein d\\u2019une variable (argument d\\u2019une m\\xE9thode ou champs d\\u2019une classe).\"), mdx(\"br\", null), mdx(\"p\", null, \"Dans le code de la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"createOne\"), \" de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FilmResource\"), \", c\\u2019est gr\\xE2ce \\xE0 \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"@Context\"), \"\\nque l\\u2019on peut r\\xE9cup\\xE9rer le contenu de la requ\\xEAte qui a \\xE9t\\xE9 filtr\\xE9e par\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthorizationRequestFilter\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"{5}\",\n    \"{5}\": true\n  }, \"@POST\\n@Produces(MediaType.APPLICATION_JSON)\\n@Consumes(MediaType.APPLICATION_JSON)\\n@Authorize\\npublic Film createOne(Film film, @Context ContainerRequest request) {\\n    User authenticatedUser = (User) request.getProperty(\\\"user\\\");\\n    System.out.println(\\\"A new film is added by \\\" + authenticatedUser.getLogin() );\\n\")), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionI\"\n  }), \"i) Gestion des r\\xE9ponses et s\\xE9rialisation d\\u2019objets JSON quelconques\"), mdx(\"h2\", null, \"i.1) Introduction\"), mdx(\"p\", null, \"Dans le cadre du module 1, nous avons vu les moyens principaux de g\\xE9rer des r\\xE9ponses.\\nNous renvoyions toujours des POJOs ou des listes de POJOs. \"), mdx(\"p\", null, \"Pour ce module-ci, nous avons \\xE9t\\xE9 en contact avec du code permettant de s\\xE9rialiser\\ndes informations et les renvoyer au client sans devoir passer par un POJO,\\nmais en cr\\xE9ant ses propres objets JSON.\"), mdx(\"br\", null), mdx(\"h2\", null, \"i.2) S\\xE9rialiser et renvoyer des objets JSON quelconques\"), mdx(\"p\", null, \"Dans le cas o\\xF9 des donn\\xE9es \\xE0 renvoyer \\xE0 un client ne correspondent pas \\xE0 un POJO,\\nnous pouvons cr\\xE9er en Java du Json via :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"JsonNode\"), \" si cela peut \\xEAtre la repr\\xE9sentation d'un objet en JSON (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ObjectNode\"), \")\\nou d'un tableau en JSON (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ArrayNode\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ObjectNode\"), \" pour la repr\\xE9sentation d'un objet en JSON\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ArrayNode\"), \"  pour la repr\\xE9sentation d'un tableau en JSON\")), mdx(\"br\", null), mdx(\"p\", null, \"Admettons que nous souhaitons construire une r\\xE9ponse JSON de ce type : \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"token\\\": \\\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJhdXRoMCIsInVzZXIiOjF9.JX5Xnp4KDvpkderjcv2W1TmCgwklKpRDIw3vheDSoNg\\\",\\n  \\\"id\\\": 1,\\n  \\\"login\\\": \\\"james\\\"\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Dans la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"login\"), \" de la classe \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthsResource\"), \", voici le code permettant\\nde renvoyer une repr\\xE9sentation JSON de cet objet via un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjectNode\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"numbered {3,8,18,24}\",\n    \"numbered\": true,\n    \"{3,8,18,24}\": true\n  }, \"public class AuthsResource {\\n    //...\\n    private final ObjectMapper jsonMapper = new ObjectMapper();\\n    //...\\n    @POST\\n    @Path(\\\"login\\\")\\n    @Consumes(MediaType.APPLICATION_JSON)\\n    @Produces(MediaType.APPLICATION_JSON)\\n    public ObjectNode login(JsonNode json) {\\n        // Get and check credentials\\n        if (!json.hasNonNull(\\\"login\\\") || !json.hasNonNull(\\\"password\\\")) {\\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\\n                    .entity(\\\"login or password required\\\").type(\\\"text/plain\\\").build());\\n        }\\n        String login = json.get(\\\"login\\\").asText();\\n        String password = json.get(\\\"password\\\").asText();\\n        // Try to login\\n        ObjectNode publicUser = myUserDataService.login(login, password);\\n        if (publicUser == null) {\\n            throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED)\\n                    .entity(\\\"Login or password incorrect\\\").type(MediaType.TEXT_PLAIN)\\n                    .build());\\n        }\\n        return publicUser;\\n    }\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"C'est donc la m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"login\"), \" de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UserDataService\"), \" qui cr\\xE9e la repr\\xE9sentation JSON\\nd'un objet contenant un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"token\"), \", un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"id\"), \" et un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"login\"), \" comme propri\\xE9t\\xE9s.\\nLe code permettant de cr\\xE9er une repr\\xE9sentation de cet objet JSON utilise un\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjectMapper\"), \" permettant de cr\\xE9er un \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjectNode\"), \" :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\",\n    \"metastring\": \"numbered {9-13}\",\n    \"numbered\": true,\n    \"{9-13}\": true\n  }, \"public ObjectNode login(String login, String password) {\\n    User user = getOne(login);\\n    if (user == null || !user.checkPassword(password))\\n        return null;\\n    String token;\\n    try {\\n        token = JWT.create().withIssuer(\\\"auth0\\\")\\n                .withClaim(\\\"user\\\", user.getId()).sign(this.jwtAlgorithm);\\n        ObjectNode publicUser = jsonMapper.createObjectNode()\\n                .put(\\\"token\\\", token)\\n                .put(\\\"id\\\", user.getId())\\n                .put(\\\"login\\\", user.getLogin());\\n        return publicUser;\\n\\n    } catch (Exception e) {\\n        System.out.println(\\\"Unable to create token\\\");\\n        return null;\\n    }\\n}\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"La m\\xE9thode \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"put\"), \" permet d\\u2019ajouter des champs \\xE0 un objet de type \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ObjecNode\"), \".\\nNous pouvons ajouter autant de champs que n\\xE9cessaire \\xE0 l\\u2019objet JSON qui sera\\ns\\xE9rialis\\xE9 et renvoy\\xE9 au client via une Root Resource (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthsResource\"), \" dans notre exemple).\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Code du tutoriel\"), \" : si vous souhaitez directement acc\\xE9der au code de la fin du tutoriel de\\ncr\\xE9ation d'une API de gestion de films pour ce module 2 :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/baja-demos/tree/main/films-api-module2\"\n  }, \"https://github.com/e-vinci/baja-demos/tree/main/films-api-module2\")), mdx(\"br\", null), mdx(\"h1\", null, mdx(\"a\", {\n    id: \"sectionJ\"\n  }), \"j) Exercice 2.1\"), mdx(\"p\", null, \"Peut-\\xEAtre avez-vous d\\xE9j\\xE0 entendu parler de cette mode montante dans le Web\\nqu\\u2019est la JAMstack ?\"), mdx(\"br\", null), mdx(\"p\", null, \"Nous souhaitons d\\xE9velopper un Headless CMS, c\\u2019est-\\xE0-dire un outil permettant\\nde cr\\xE9er du contenu, tr\\xE8s souvent utilis\\xE9 dans le cadre de sites JAMstack.\"), mdx(\"p\", null, \"Un Headless CMS fournira une interface web pour cr\\xE9er du contenu (ou des donn\\xE9es),\\nainsi qu\\u2019une RESTful API mettant \\xE0 disposition ce contenu.\"), mdx(\"br\", null), mdx(\"p\", null, \"L\\u2019Headless CMS que nous souhaitons d\\xE9velopper doit permettre de cr\\xE9er le contenu\\nassoci\\xE9 \\xE0 un blog.\"), mdx(\"p\", null, \"Un blog sera structur\\xE9 en pages. Une page aura un id, un titre, un URI, un contenu,\\nun auteur ainsi qu\\u2019un statut de publication.\"), mdx(\"p\", null, \"Le statut de publication d\\u2019une page peut actuellement prendre comme valeur :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\xAB hidden \\xBB\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\xAB published \\xBB\")), mdx(\"br\", null), mdx(\"p\", null, \"Seul un utilisateur authentifi\\xE9 pourra lire, cr\\xE9er, modifier ou supprimer des pages.\"), mdx(\"br\", null), mdx(\"p\", null, \"La modification d\\u2019une page, tout comme la suppression d\\u2019une page ne pourra se faire\\nque par son auteur.\"), mdx(\"br\", null), mdx(\"p\", null, \"L\\u2019ajout ou la modification d\\u2019une page ne sera possible que si le statut de publication\\ndonn\\xE9 correspond \\xE0 un des deux statuts actuels (\\xAB hidden ou \\xAB published \\xBB).\\nSinon un message d\\u2019erreur devra \\xEAtre renvoy\\xE9.\"), mdx(\"br\", null), mdx(\"p\", null, \"La lecture d\\u2019une page, ou de toutes les pages, pourra \\xEAtre r\\xE9alis\\xE9e par n\\u2019importe\\nquel utilisateur authentifi\\xE9 pour les pages dont le statut vaut \\xAB published \\xBB.\"), mdx(\"br\", null), mdx(\"p\", null, \"Pour les pages dont le statut vaut \\xAB hidden \\xBB, seul leur auteur authentifi\\xE9 pourra les lire.\"), mdx(\"br\", null), mdx(\"p\", null, \"Lorsque vous renvoyer les donn\\xE9es associ\\xE9es \\xE0 une page, il est acceptable, \\xE0 ce stade-ci,\\nd'inclure le password dans la r\\xE9ponse faite au client. \"), mdx(\"br\", null), mdx(\"p\", null, \"Il est aussi acceptable \\xE0 ce stade-ci, lorsque vous devez renvoyer une erreur \\xE0 un client, de simplement\\nrenvoyer un code d'erreur (sans mettre de message dans le body de la r\\xE9ponse).\"), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez d\\xE9velopper une application JAX-RS mettant \\xE0 disposition les op\\xE9rations\\nd\\xE9crites ci-dessus.\"), mdx(\"br\", null), mdx(\"p\", null, \"Dans un premier temps, veuillez formaliser les op\\xE9rations associ\\xE9es \\xE0 vos RESTful\\nAPIs sous forme d\\u2019un tableau dans un fichier \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"README.md\"), \". \"), mdx(\"p\", null, \"Votre tableau doit reprendre les conventions REST pr\\xE9sent\\xE9es au point\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/js/modules/2#sectionC\"\n  }, \"c) Rappel de conventions sur les RESTful APIs, authentification & autorisation\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Comment cr\\xE9er un tableau dans un fichier Markdown  ?\\nDeux options :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Soit vous utiliser des '\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"|\"), \"' pour d\\xE9limiter les cellules et des '\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"|---|\"), \"' pour s\\xE9parer\\nles headers du corps du tableau.\\nVoici un exemple pour l'API de films :\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"| URI | M\\xE9thode HTTP | Auths? | Op\\xE9ration |\\n|---|---|---|---|\\n| **films** | GET | Non | READ ALL : Lire toutes les ressources de la collection |\\n| **films?minimumduration=value** | GET | Non | READ ALL FILTERED : Lire toutes les ressources de la collection selon le filtre donn\\xE9 |\\n| **films/{id}** | GET | Non | READ ONE : Lire la ressource identifi\\xE9e |\\n| **films** | POST | JWT | CREATE ONE : Cr\\xE9er une ressource bas\\xE9e sur les donn\\xE9es de la requ\\xEAte |\\n| **films/{id}** | DELETE | JWT | DELETE ONE : Effacer la ressource identifi\\xE9e |\\n| **films/{id}** | PUT | JWT | UPDATE ONE : Replacer l'enti\\xE8ret\\xE9 de la ressource par les donn\\xE9es de la requ\\xEAte |\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Soit c\\u2019est simplement un tableau HTML (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<table>\"), \").\")), mdx(\"br\", null), mdx(\"p\", null, \"Lors de l\\u2019impl\\xE9mentation de vos RESTful APIs, veuillez tester toutes les\\nm\\xE9thodes offertes par votre application JAX-RS \\xE0 l\\u2019aide d'un client l\\xE9ger (HTTP client d'IntelliJ\\nou Rest Client de VS Code).\"), mdx(\"br\", null), mdx(\"p\", null, \"Les ressources doivent persister au format JSON et vous devez \\xE9chapper les caract\\xE8res dangereux.\"), mdx(\"br\", null), mdx(\"p\", null, \"Veuillez partir d'un archetype Maven comme d\\xE9crit au point\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/js/modules/1#sectionB\"\n  }, \"Module 1 : b) Cr\\xE9ation d\\u2019une premi\\xE8re application sur base d\\u2019un Archetype Maven\"), \".\"), mdx(\"p\", null, \"Veuillez int\\xE9grer \\xE0 votre application les fichiers utiles de la d\\xE9mo\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/e-vinci/baja-demos/tree/main/films-api-module2\"\n  }, \"https://github.com/e-vinci/baja-demos/tree/main/films-api-module2\"), \" pr\\xE9sent\\xE9e dans ce module-ci,\\nprincipalement : \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pom.xml\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Authorize\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthorizationRequestFilter\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Config\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AuthsResource\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"UserDataService\")), mdx(\"br\", null), mdx(\"p\", null, \"Optionnel : vous souhaitez rapidement d\\xE9couvrir les principes d\\u2019une architecture\\nWeb associ\\xE9e \\xE0 la JAMstack ? \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jamstack.wtf/\"\n  }, \"https://jamstack.wtf/\"), \" \"), mdx(\"br\", null), mdx(\"p\", null, \"Optionnel : si vous souhaitez d\\xE9couvrir le format Markdown, notamment tr\\xE8s souvent utilis\\xE9\\ndans certains sites JAMstack (source des donn\\xE9es pour certains Headless CMS) :\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.markdownguide.org/basic-syntax/\"\n  }, \"https://www.markdownguide.org/basic-syntax/\")), mdx(\"br\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Challenges\"), \" : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"N\\xB01\"), \" : Modifiez les autorisations au niveau des op\\xE9rations de lecture (en gras pour la modification) :\\nla lecture d\\u2019une page, ou de toutes les pages, pourra \\xEAtre r\\xE9alis\\xE9e par n\\u2019importe\\nquel utilisateur \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"anonyme ou authentifi\\xE9\"), \" pour les pages dont le statut vaut \\xAB published \\xBB.\\nPour les pages dont le statut vaut \\xAB hidden \\xBB, seul leur auteur authentifi\\xE9 pourra les lire.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"N\\xB02\"), \" : lorsqu'un utilisateur tente d'effacer ou modifier une page dont il n'est pas l'auteur,\\nrenvoyer un code d'erreur appropri\\xE9 au client.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"N\\xB03\"), \" : Si vous ne l'avez pas d\\xE9j\\xE0 fait, trouvez une fa\\xE7on de ne pas inclure le password lors de la s\\xE9rialisation de celui-ci\\ndans une page (via l'auteur de la page). Attention, le password doit toujours \\xEAtre s\\xE9rialis\\xE9\\nlors de l'enregistrement d'un utilisateur.\")), mdx(\"br\", null));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"modules/2","frontmatter":{"title":"Module 2 : JAX-RS & auths","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"Authentification & autorisation au sein de JAX-RS","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='500'%20height='150'%20viewBox='0%200%20500%20150'%20preserveAspectRatio='none'%3e%3crect%20width='100%25'%20height='100%25'%20fill='gray'/%3e%3cpath%20d='M123%2025l-16%2017-1-9-1-10-37%2039-36%2041%2039%2010%2040%2010%203-3c13-12%2024-35%2028-57%203-14%201-54-2-56l-17%2018m47%2058l-1%2018v17l-3%202c-3%202-7%203-9%200-2-1-2-1-4%201-7%204%207%2011%2015%207%207-4%207-5%208-27V82h-3l-3%201m27%202c-3%205-16%2043-16%2043l3%201c4%200%204%200%206-5l2-5h17l2%205c2%204%202%205%205%205%204%200%204%200%204-2a2053%202053%200%2000-19-45c-3%200-3%200-4%203m28%2021v23h7v-7c0-7%200-8%204-11l4-4%207%2011%206%2011h15l2-6%202-5h9l8%201%202%205c2%205%202%205%206%205l3-1a519%20519%200%2000-19-46c-3%200-2-2-13%2028l-7%2018c-1%200-16-27-15-28l7-9c7-9%207-9%202-9-3%200-4%201-13%2012l-9%2012-1-12V82h-7v24m81%200v23h7v-20h9l4%2010%205%2010h4c5%200%205%201-1-11l-5-9%203-3c5-4%206-9%205-14-2-8-7-10-23-10h-8v24m33-20v3h13v40h7V89h12v-7h-32v4m44-1l-16%2044h4c3%200%203-1%205-5l2-5h17l2%205c2%204%202%205%205%205l4-1a698%20698%200%2000-19-46c-2%200-3%200-4%203m44%2021v23h29v-7h-22v-13h19v-7h-19V89h22v-7h-29v24m36%200v23h29v-7h-22v-13h19v-7h-19V89h22v-7h-29v24M313%2096v7h7c10-1%2014-6%209-12-1-2-2-2-9-2h-7v7m-113-2l-6%2017%207%201%206-1a691%20691%200%2001-7-17m77%209l-3%209h7l6-1-6-17-4%209m106-2l-3%2010%207%201%206-1a691%20691%200%2001-6-18l-4%208M8%20100l6%205c8%204%2020%2016%2027%2026l6%208%203-2c12-8%2027-12%2043-12l10-1a1433%201433%200%2000-95-24'%20fill='green'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/js/static/c55d0def10b42157d9b6236bf3d72afb/cdc33/jakarta-logo.png","srcSet":"/js/static/c55d0def10b42157d9b6236bf3d72afb/cdc33/jakarta-logo.png 500w","sizes":"100vw"},"sources":[{"srcSet":"/js/static/c55d0def10b42157d9b6236bf3d72afb/ecd43/jakarta-logo.webp 500w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3}},"base":"jakarta-logo.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='512'%20height='512'%20viewBox='0%200%20512%20512'%20preserveAspectRatio='none'%3e%3crect%20width='100%25'%20height='100%25'%20fill='gray'/%3e%3cpath%20d='M227%202a256%20256%200%201059%20509A256%20256%200%2000227%202m7%2054c-82%209-150%2068-172%20147l-2%208%20120%20121c116%20116%20121%20120%20124%20119%2021-4%2052-19%2074-35%2047-35%2079-98%2079-154v-6H329v36h44l43%201a167%20167%200%2001-97%20115l-8%203-105-105-105-105%203-8a165%20165%200%2001287-32l27-23a202%20202%200%2000-184-82M56%20267a200%20200%200%2000196%20189L56%20260v7'%20fill='green'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/js/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/js/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/js/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='544'%20height='492'%20viewBox='0%200%20544%20492'%20preserveAspectRatio='none'%3e%3crect%20width='100%25'%20height='100%25'%20fill='gray'/%3e%3cpath%20d='M146%207c-31%208-51%2035-50%2068%201%2015%203%2020%2023%2056a3456%203456%200%200090%20151%2053177%2053177%200%200182%20145c16%2029%2018%2031%2026%2039a66%2066%200%2000113-47c0-19-1-20-33-75l-28-49h52c56%200%2064%200%2075-4a67%2067%200%2000-2-127l-8-2-39-1h-39l17-30c22-38%2023-41%2023-59%200-13%200-15-2-22a66%2066%200%2000-110-25c-8%208-9%2010-35%2055l-28%2048-28-47c-27-46-28-48-36-56a64%2064%200%2000-63-18'%20fill='green'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/js/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/js/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/js/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='686'%20height='419'%20viewBox='0%200%20686%20419'%20preserveAspectRatio='none'%3e%3crect%20width='100%25'%20height='100%25'%20fill='gray'/%3e%3cpath%20d='M196%2023v21h85V1h-85v22m42%2026v4H81v10l1-5v-4h104v4l1%205v-9h103v4l1%204%201-4v-3l51-1h52v4l1%204%201-4v-4l-79-1h-78v-4l-1-4-1%204M38%2084v21h86V63H38v21m105%200v21h86V63h-86v21m105%200v21h86V63h-86v21m105%200v21h86V63h-86v21m0%2062v21h86v-43h-86v22m42%2026v4H186v10l1-5v-4h104v4l1%205v-9h52l52%201v4l1%204v-9h103v4l1%205v-9h104v4l1%205v-10H397v-4l-1-4-1%204m-252%2035v21h86v-42h-86v21m105%200v21h86v-42h-86v21m105%200v21h86v-42h-86v21m105%200v21h86v-42h-86v21m105%200v21h86v-42h-86v21M151%20310v82h14l-7-1h-6v-60h6l7-1h-13v-61h6l7-1h-13v-20l-1%2062m105%200v82h14l-7-1h-6v-60h6l7-1h-13v-61h6l7-1h-13v-20l-1%2062m-91-41v21h86v-42h-86v21m105%200v21h86v-42h-86v21m-105%2062v21h86v-43h-86v22m105%200v21h86v-43h-86v22m-105%2061v21h86v-42h-86v21m105%200v21h86v-42h-86v21'%20fill='green'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/js/static/a9d7114ba2764dabfc41a67a6635c992/cd97c/backends.jpg","srcSet":"/js/static/a9d7114ba2764dabfc41a67a6635c992/cd97c/backends.jpg 686w","sizes":"100vw"},"sources":[{"srcSet":"/js/static/a9d7114ba2764dabfc41a67a6635c992/86e9b/backends.webp 686w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6107871720116618}},"base":"backends.jpg"}}]}},"pageContext":{"slug":"/modules/2/"}},"staticQueryHashes":["1696221415","2644139645","3028011774","3458129946","501654901","575455071"]}