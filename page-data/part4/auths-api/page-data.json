{"componentChunkName":"component---src-templates-mdx-pages-js-content-file-path-src-mdx-pages-part-4-auths-api-fr-mdx","path":"/part4/auths-api/","result":{"data":{"mdx":{"id":"34e3ff02-2224-52bc-80e0-e52d6c4065db","body":"\r\n# a) Authentification et autorisation d'acc√®s aux op√©rations d'une RESTful API via JWT\r\n\r\n<InternalPageMenu>\r\n  <PathViewer>\r\n    <PathViewerItem to=\"/\"> web2course </PathViewerItem>\r\n    <PathViewerItem to=\"/part4\"> Partie 4 </PathViewerItem>\r\n    <PathViewerItem selected> a) JWT auths & API </PathViewerItem>\r\n  </PathViewer>\r\n  <InternalPageMenuItem> C'est quoi l'authentification et l'autorisation ? </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Stateful VS stateless authentication </InternalPageMenuItem>\r\n  <InternalPageMenuItem> C'est quoi les tokens JWT ? </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Authentification et cr√©ation de token </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Autorisation et v√©rification de token </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Client REST avec JWT </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Protection des op√©rations d'√©criture d'une API </InternalPageMenuItem>\r\n  <InternalPageMenuItem> Project 4.1 : Authentification & autorisation d'op√©rations </InternalPageMenuItem>\r\n</InternalPageMenu>\r\n\r\n<div className=\"card card__simple-youtube-container\">\r\n    <YoutubeImage src=\"https://youtu.be/jCUyii3hcwY\" />\r\n</div>\r\n\r\n# <InternalPageTitle> C'est quoi l'authentification et l'autorisation ? </InternalPageTitle>\r\n\r\n## Authentification, c'est quoi ?\r\nL'authentification, c'est le processus de **v√©rifier qui est l'utilisateur** d'une application.\r\n\r\nPour authentifier un utilisateur, on va g√©n√©ralement passer via un formulaire de connexion, lui demandant un username et un password.\r\n\r\n## Autorisation, c'est quoi ?\r\nL'autorisation, c'est le processus de **v√©rifier ce √† quoi un utilisateur √† acc√®s**.\r\n\r\nUne API va autoriser les acc√®s √† certaines op√©rations en fonction des privil√®ges associ√©s aux utilisateurs. Il y aura des op√©rations qui seront autoris√©es : \r\n- **pour tous les utilisateurs**, tant anonymes qu'authentifi√©s ;  \r\n*imaginez par exemple les op√©rations de lecture de produits sur un site \"vitrine\". Il ne faut pas devoir cr√©er de compte utilisateur pour pouvoir afficher les produits du site.*\r\n- **pour tous les utilisateurs authentifi√©s**, peu importe leurs privil√®ges ;  \r\n*imaginez le fait de pouvoir poster des messages dans un forum ; il faut avoir un compte pour pouvoir le faire, mais il ne faut pas de privil√®ges sp√©cifiques (pas besoin d'√™tre admin).*\r\n- **pour seulement un ou plusieurs utilisateur(s) authentifi√©(s)** ayant les privil√®ges requis ;  \r\n*imaginez une op√©ration de lecture de tous les profils des utilisateurs d'une banque ; il faut avoir un compte admin de la banque pour pouvoir le faire. Ca serait catastrophique si n'importe quel utilisateur authentifi√© pourrait acc√©der aux profils de tous les utilisateurs !*\r\n\r\n## Diff√©rents moyens d'authentification\r\n\r\n### Authentification stateful\r\n\r\nTraditionnellement, ou anciennement, nous avons l'authentification qui est support√©e √† l'aide de cookies. L'utilisateur envoie via un formulaire son username et password, le serveur v√©rifie ceux-ci et cr√©e un id de session et le renvoie √† l'utilisateur via un cookie.  \r\nApr√®s l'authentification, √† chaque requ√™te du client sur ce serveur, le cookie est envoy√©, et le serveur, qui a sauvegard√© la session, va la retrouver sur base de l'id de session pr√©sent dans le cookie et va autoriser ou non l'acc√®s √† l'op√©ration demand√©e par le client.  \r\nC'est ce qu'on appelle une authentification **stateful**.\r\n\r\nUn m√©canisme d'authentification **stateful** indique que le serveur est responsable de sauvegarder les donn√©es de session des utilisateurs. \r\n\r\nOn parle de **session** d'un utilisateur comme √©tant toute la dur√©e o√π le client s'authentifie √† l'application web jusqu'√† ce qu'il quitte cette application, lorsqu'il ferme son browser.\r\n\r\n### Authentification stateless \r\n\r\nDe mani√®re plus moderne, nous avons des m√©canismes d'authentification qui sont dits **stateless**. Dans ce genre de m√©canisme, c'est le client qui doit sauvegarder les donn√©es de session, et donc le browser. L'authentification √† l'aide de **tokens** devient tr√®s populaire.  \r\nIl existe diff√©rents moyen de l'impl√©menter. Dans le cadre de ce cours, nous focuserons sur la fa√ßon la plus habituelle, les **JSON Web Tokens**, ou **JWT**.\r\n\r\nIl existe d'autres m√©canismes tr√®s modernes qui utilisent des tokens, et qui sont mis en place par des tiers : **OAuth**, **OpenId**... Ces m√©canismes sont offerts par Microsoft, Google, Facebook... Nous ne les verrons pas dans le cadre de cours. N√©anmoins, √† la fin de ce cours, vous devriez √™tre apte √† pouvoir les utiliser, sous r√©serve de bien lire la documentation üòâ.\r\n\r\n# <InternalPageTitle> Stateful VS stateless authentication  </InternalPageTitle>\r\n\r\nQuels sont les avantages & inconv√©nients d'une authentification stateful ? et d'une authentification stateless ?\r\n\r\n#### Authentification stateful\r\n**Inconv√©nients** :\r\n- La session utilise de la m√©moire pour chaque utilisateur.\r\n- Le backend n'a aucune mani√®re de d√©terminer si le frontend s'est d√©connect√© du site ou non : gestion de l'expiration d'une session plus compliqu√©e, notamment si le frontend revient apr√®s une longue dur√©e.\r\n- Toutes les sessions sont perdues en cas de red√©marrage du serveur (r√©authentification).\r\n- Load balancing compliqu√© ; en effet, si un client fait une requ√™te, pendant toute la dur√©e de la session, s'il y a plusieurs serveurs qui peuvent y r√©pondre, comment est g√©r√©e la session de ce client ? Par quel(s) serveur(s) ? Comment se partagent-ils les donn√©es de session ? Est-ce que √ßa doit toujours √™tre le m√™me serveur qui r√©ponde au m√™me client ?\r\n\r\n**Avantages** :\r\n- Peu gourmand en ressource point de vue processing et tr√®s rapide ; en effet, une fois qu'une session est en place, la v√©rification que le cookie contient le bon id de session se fait vite.\r\n\r\n#### Authentification stateless\r\n**Inconv√©nients** : \r\nComme le serveur ne retient plus l'utilisateur en m√©moire, il doit utiliser de la cryptographie pour cr√©er et valider les token ; c'est donc consommateur en ressource point de vue processing.\r\n\r\n**Avantages** : \r\n- Pas de session √† g√©rer, m√™me apr√®s red√©marrage du serveur, il n'y a pas de r√©authentification n√©cessaire.\r\n- Evolutif, utilisation facile de plusieurs serveurs si du load balancing est n√©cessaire ; en effet, comme chaque requ√™te du client contient toutes les infos pour se faire autoriser, il n'est pas n√©cessaire de savoir quel serveur va prendre en charge la requ√™te.\r\n\r\nNotons que la \"scalability\" horizontale, la possibilit√© de permettre √† une application d'augmenter sa capacit√© de r√©pondre √† une charge grandissante simplement en ajoutant des machines, est quelque chose de tr√®s important √† notre √©poque.  \r\nCertaines applications web ont des centaines de millions d'utilisateurs ; pour celles-ci, on ne peut pas compter sur la \"scalability\" verticale, c'est-√†-dire le fait d'augmenter les ressources d'une machine, en augmentant sa RAM, son processeur, son espace de stockage...\r\n\r\nD√®s lors, dans le cadre de ce cours, nous allons pr√©f√©rer les applications web qui peuvent tourner sur des serveurs **stateless**.\r\n\r\n# <InternalPageTitle> C'est quoi les tokens JWT ? </InternalPageTitle>\r\n\r\nLes **JSON Web token**, ou **JWT**, appartiennent √† un standard internet permettant l'√©change s√©curis√© de tokens entre plusieurs parties.\r\n\r\nUn **JWT** contient **trois parties encod√©es en base64** et ressemble √† qqch du style :  \r\n**`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.`**  \r\n**`eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.`**   \r\n**`SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c`**\r\n\r\nVoici les 3 parties d'un JWT et leurs caract√©ristiques :\r\n- l'**ent√™te** (ou header) : un objet JSON identifiant le type de token (JWT) et l'algorithme utilis√© pour g√©n√©rer la signature du token (HS256), un algorithme de hachage. \r\n- le **payload** : un objet JSON permettant de sp√©cifier le **claim** ; ce sont des param√®tres optionnels pr√©cisant les affirmations associ√©es au token, comme la date d'expiration du token, son cr√©ateur, le fait que l'utilisateur est admin... g√©n√©ralement, on y met pas trop d'info, principalement l'identifiant de l'utilisateur ; si l'API a besoin de plus d'info concernant l'utilisateur, elle ira g√©n√©ralement les chercher dans ses donn√©es.\r\n- la **signature** : c'est une signature num√©rique construite √† partir d'un secret priv√© ou d'une cl√© publique/priv√©e, via l'algorithme pr√©cis√© dans la signature.\r\n\r\nüí≠ C'est bien joli tout √ßa, mais comment √ßa permet de s√©curiser la session d'un utilisateur ?  \r\nG√©n√©ralement, l'API, et elle uniquement, connait le secret priv√©. Elle va donc cr√©er le token d'un utilisateur authentifi√©, en y ajoutant le claim (ou les affirmations) qu'elle juge utile.  \r\nLorsque le client re√ßoit son token, il va le sauvegarder dans son browser.  \r\nPour chaque requ√™te n√©cessitant une autorisation de l'API, le client enverra son token au sein du header de la requ√™te.  \r\nL'API utilisera le secret priv√©, connu d'elle-m√™me uniquement, pour v√©rifier la signature du token. Si tout est OK, c'est que l'utilisateur est bien authentifi√© et que son claim est OK.\r\n\r\nImaginez maintenant qu'un hackeur tente de modifier le token, pour modifier le claim, notamment en changeant l'id de l'utilisateur pr√©sent dans le payload du token.\r\nEt bien la signature ne correspondra plus √† ce token l√† ! L'API le d√©tectera.  \r\nPour que le hackeur r√©ussisse son acte malicieux, il est oblig√© de conna√Ætre le secret priv√© qui ne doit √™tre connu que de l'API. Ca ne serait que sur base du secret priv√© que les hackeurs pourraient g√©n√©rer un nouveau token qui serait valid√© par l'API. Pas √©vident √† faire...\r\n\r\nAinsi, on peut imaginer un token comme une enveloppe s√©curis√© par un cadenas tr√®s sp√©cial : ce cadenas, qui est mis sur l'enveloppe contenant, par exemple, l'identifiant d'un utilisateur, est ferm√© par la cl√© üîë que seulement conna√Æt l'API.\r\nSi quelqu'un touche √† l'enveloppe, le cadenas ne s'ouvrira plus avec la üîë de l'API : la tentative de hackage sera d√©tect√©e ! \r\nSi quelqu'un tente de cr√©er une enveloppe s√©curis√©, il le fera avec une autre cl√©, **üóù** par exemple, car il ne conna√Æt pas üîë. L'API, tentant d'ouvrir l'enveloppe s√©curis√©e √† l'aide de üîë, elle ne s'ouvrira pas : la tentative de hacking sera d√©tect√©e ! \r\n\r\nüí≠ Est-ce que cette m√©taphore d'enveloppe s√©curis√©e vous parle ?\r\nAttention que dans la r√©alit√©, le payload classique d'un token sera d√©codable, que l'on connaisse ou pas le secret priv√©. Il est encod√© en base64 ! Ne mettez donc jamais de secrets dans le payload d'un token !  \r\nSi vraiment un jour vous deviez mettre un secret dans un payload, bien que d√©conseill√©, vous pourriez toujours le faire en cryptant le payload.\r\n\r\nüëç Le m√©canisme de token assure que l'on aie une tr√®s haute probabilit√© de d√©tecter les alt√©rations faites sur les tokens, les tentatives de forgeage, gr√¢ce √† la signature de ceux-ci.  \r\n\r\n‚ö° Par contre, si nous laissions tra√Æner des informations dans le payload d'un token, comme un password d'un utilisateur et son username, alors l√†, c'est juste un beau cadeau que l'on offre aux hackeurs ; ils n'auraient plus qu'√† trouver un moyen de voler √† distance nos donn√©es de session ; ils pourraient ensuite utiliser le formulaire de connexion et prendre possession de notre identit√© üò®.\r\n\r\nIl existe un site fort int√©ressant qui montre la structure d'un token et qui permet de les d√©coder : [jwt.io](https://jwt.io/) [[R.63]](/references/#r63). Nous l'utiliserons plus tard pour d√©coder les tokens g√©n√©r√©s par nos RESTful API.\r\n\r\n# <InternalPageTitle> Authentification et cr√©ation de token </InternalPageTitle>\r\n\r\n<div className=\"card card__simple-youtube-container\">\r\n    <YoutubeImage src=\"https://youtu.be/lVTM0x0vOrg\" />\r\n</div>\r\n\r\n## Introduction\r\n\r\nVia un exemple concret associ√© √† notre RESTful API qui g√®re les ressources de type \"pizzas\", nous allons mettre en place un processus d'authentification et d'autorisation JWT.\r\n\r\nLa librairie que nous allons utiliser dans le cadre de ce cours pour g√©rer des tokens JWT est [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken).\r\n\r\nDans ce nouveau tutoriel, nous allons continuer le d√©veloppement de l'API [api-fat-model](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model) pour ajouter des op√©rations permettant l'authentification et l'autorisation d'utilisateurs.\r\n\r\nAu sein de votre repo **`web2`**, veuillez cr√©er le projet nomm√© **`/web2/tutorials/pizzeria/api/auths`** sur base d'un copi√© coll√© de **`/web2/tutorials/pizzeria/api/fat-model`** (ou [api-fat-model](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/fat-model)).\r\n\r\nPour la suite du tutoriel, nous consid√©rons que tous les chemins absolus d√©marrent du r√©pertoire\r\n**`/web2/tutorials/pizzeria/api/auths`**.\r\n\r\nVeuillez installer la librairie **`jsonwebtoken`** au sein de votre nouveau projet **`auths`** :\r\n```bash\r\nnpm i jsonwebtoken\r\n```\r\n\r\n## M√©canisme d'authentification et cr√©ation du token\r\n\r\nToujours √† l'aide d'Express, nous allons cr√©er un router **`auths`** qui mettra √† disposition les op√©rations de **`login`** et de **`register`**. \r\nVoici le contrat associ√© √† ces nouvelles op√©rations :\r\n\r\n##### Op√©rations sur les ressources de type \"auths\"\r\n| URI | M√©thode HTTP | Op√©ration |\r\n|---|---|---|\r\n| **`auths/login`** | **POST** | V√©rifier les credentials d'une ressource de type \"users\" et renvoyer le username et un token JWT si les credentials sont OK |\r\n| **`auths/register`** | **POST** | Cr√©er une ressource de type \"users\" et renvoyer le username et un token JWT |\r\n\r\n<br/>\r\n\r\nLe mod√®le **`users`** s'occupera de cr√©er les utilisateur, de v√©rifier leurs credentials ainsi que de cr√©er des token.\r\n\r\nVoici le workflow attendu pour une op√©ration de **`login`** ou de **`register`** :\r\n\r\n<ScrollableImage name=\"login.png\" minWidth=\"879px\" maxWidth=\"879x\" />\r\n<figcaption>Appel √† une RESTful API pour s'authentifier et obtenir un JWT</figcaption>\r\n\r\nCe que l'on voit dans l'image ci-dessus : \r\n- si le mod√®le consid√®re que l'utilisateur est authentifiable, que ses credentials sont OK, alors il va utiliser la m√©thode **`sign`** de l'objet **`jwt`** pour cr√©er un token. \r\n- le token est envoy√© dans le body de la r√©ponse √† l'utilisateur. \r\n\r\nCe que l'on ne voit pas dans l'image ci-dessus :\r\n- c'est le job du client de sauvegarder le token. Si l'application cliente est un browser, alors celui-ci pourra √™tre sauvegard√© dans le web storage du browser.\r\n- l'application cliente peut √™tre faite avec n'importe quelle technologie. Par exemple, nous pourrons utiliser REST Client pour faire une requ√™te √† l'API...\r\n\r\nDans notre RESTful API, nous avons d√©cid√© que lorsqu'un client s'enregistre, quand il fait appel √† l'op√©ration **`register`** pour cr√©er un compte, l'API consid√®re automatiquement que cet utilisateur est authentifi√©. Tout comme la m√©thode **`login`**, la m√©thode **`register`** cr√©era et renverra un token JWT √† l'utilisateur.\r\n\r\nNB : Il est possible d'envisager un workflow diff√©rent : apr√®s le **`register`**, l'application demanderait √† l'utilisateur un **`login`**, **`register`** ne renvoyant jamais de token √† l'utilisateur.\r\n\r\n## Impl√©mentation de login & register\r\n\r\nNous allons √† pr√©sent mettre en place le code permettant d'impl√©menter le workflow que l'on vient de d√©couvrir.\r\n\r\nVeuillez cr√©er le mod√®le **`users`** en cr√©ant le fichier **`/models/users.js`** et y inclure ce code :\r\n```js numbered highlighting=\"1,5-6,23-27,29-31,34,43-47,49-52,54\"\r\nconst jwt = require('jsonwebtoken');\r\nconst path = require('node:path');\r\nconst { parse, serialize } = require('../utils/json');\r\n\r\nconst jwtSecret = 'ilovemypizza!';\r\nconst lifetimeJwt = 24 * 60 * 60 * 1000; // in ms : 24 * 60 * 60 * 1000 = 24h\r\n\r\nconst jsonDbPath = path.join(__dirname, '/../data/users.json');\r\n\r\nconst defaultUsers = [\r\n  {\r\n    id: 1,\r\n    username: 'admin',\r\n    password: 'admin',\r\n  },\r\n];\r\n\r\nfunction login(username, password) {\r\n  const userFound = readOneUserFromUsername(username);\r\n  if (!userFound) return undefined;\r\n  if (userFound.password !== password) return undefined;\r\n\r\n  const token = jwt.sign(\r\n    { username }, // session data added to the payload (payload : part 2 of a JWT)\r\n    jwtSecret, // secret used for the signature (signature part 3 of a JWT)\r\n    { expiresIn: lifetimeJwt }, // lifetime of the JWT (added to the JWT payload)\r\n  );\r\n\r\n  const authenticatedUser = {\r\n    username,\r\n    token,\r\n  };\r\n\r\n  return authenticatedUser;\r\n}\r\n\r\nfunction register(username, password) {\r\n  const userFound = readOneUserFromUsername(username);\r\n  if (userFound) return undefined;\r\n\r\n  createOneUser(username, password);\r\n\r\n  const token = jwt.sign(\r\n    { username }, // session data added to the payload (payload : part 2 of a JWT)\r\n    jwtSecret, // secret used for the signature (signature part 3 of a JWT)\r\n    { expiresIn: lifetimeJwt }, // lifetime of the JWT (added to the JWT payload)\r\n  );\r\n\r\n  const authenticatedUser = {\r\n    username,\r\n    token,\r\n  };\r\n\r\n  return authenticatedUser;\r\n}\r\n\r\nfunction readOneUserFromUsername(username) {\r\n  const users = parse(jsonDbPath, defaultUsers);\r\n  const indexOfUserFound = users.findIndex((user) => user.username === username);\r\n  if (indexOfUserFound < 0) return undefined;\r\n\r\n  return users[indexOfUserFound];\r\n}\r\n\r\nfunction createOneUser(username, password) {\r\n  const users = parse(jsonDbPath, defaultUsers);\r\n\r\n  const createdUser = {\r\n    id: getNextId(),\r\n    username,\r\n    password,\r\n  };\r\n\r\n  users.push(createdUser);\r\n\r\n  serialize(jsonDbPath, users);\r\n\r\n  return createdUser;\r\n}\r\n\r\nfunction getNextId() {\r\n  const users = parse(jsonDbPath, defaultUsers);\r\n  const lastItemIndex = users?.length !== 0 ? users.length - 1 : undefined;\r\n  if (lastItemIndex === undefined) return 1;\r\n  const lastId = users[lastItemIndex]?.id;\r\n  const nextId = lastId + 1;\r\n  return nextId;\r\n}\r\n\r\nmodule.exports = {\r\n  login,\r\n  register,\r\n  readOneUserFromUsername,\r\n};\r\n\r\n```\r\n\r\nDans le code ci-dessus, **jwtSecret** est le secret priv√© connu uniquement du serveur. C'est la m√™me secret qu'il faudra utiliser pour v√©rifier un token.  \r\n\r\n**`jwt.sign()`** permet de cr√©er le token et ses 3 parties :\r\n- le payload du token, la 2√®me partie du token, est compl√©t√© principalement via le permier argument de **`sign()`** ; ici, le token affirme que l'utilisateur poss√©dant le **`username`** donn√© est authentifi√©.\r\n- le payload du token sera aussi modifi√© sur base de la dur√©e d'expiration du token, selon l'argument **`expiresIn`**.\r\n- **`jwtSecret`** est utilis√© pour cr√©er la 3√®me partie du token, sa signature.\r\n\r\nIl faut maintenant que nous cr√©ions le router **`auths`** offrant les op√©rations de **`login`** et de **`register`**, en faisant appel au mod√®le **`users`**.  \r\nVeuillez cr√©er le fichier **`/routes/auths.js`** et y inclure le code suivant :\r\n```js\r\nconst express = require('express');\r\nconst { register, login } = require('../models/users');\r\n\r\nconst router = express.Router();\r\n\r\n/* Register a user */\r\nrouter.post('/register', (req, res) => {\r\n  const username = req?.body?.username?.length !== 0 ? req.body.username : undefined;\r\n  const password = req?.body?.password?.length !== 0 ? req.body.password : undefined;\r\n\r\n  if (!username || !password) return res.sendStatus(400); // 400 Bad Request\r\n\r\n  const authenticatedUser = register(username, password);\r\n\r\n  if (!authenticatedUser) return res.sendStatus(409); // 409 Conflict\r\n\r\n  return res.json(authenticatedUser);\r\n});\r\n\r\n/* Login a user */\r\nrouter.post('/login', (req, res) => {\r\n  const username = req?.body?.username?.length !== 0 ? req.body.username : undefined;\r\n  const password = req?.body?.password?.length !== 0 ? req.body.password : undefined;\r\n\r\n  if (!username || !password) return res.sendStatus(400); // 400 Bad Reques\r\n\r\n  const authenticatedUser = login(username, password);\r\n\r\n  if (!authenticatedUser) return res.sendStatus(401); // 401 Unauthorized\r\n\r\n  return res.json(authenticatedUser);\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n\r\nIl n'y a rien de bien sp√©cial √† ce code. On fait simplement appel aux op√©rations du mod√®le **`users`**.\r\n\r\nAttention, il faut rajouter le nouveau router au sein de **`app.js`** pour que notre API puisse offrir les nouvelles op√©rations ; veuillez donc ajouter ce code dans **`/app.js`** :\r\n```js highlighting=\"7,18\"\r\nconst express = require('express');\r\nconst cookieParser = require('cookie-parser');\r\nconst logger = require('morgan');\r\n\r\nconst usersRouter = require('./routes/users');\r\nconst pizzaRouter = require('./routes/pizzas');\r\nconst authsRouter = require('./routes/auths');\r\n\r\nconst app = express();\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\n\r\napp.use('/users', usersRouter);\r\napp.use('/pizzas', pizzaRouter);\r\napp.use('/auths', authsRouter);\r\n\r\nmodule.exports = app;\r\n```\r\n\r\n## Utilisation de Rest Client pour tester les nouvelles op√©rations\r\n\r\nVeuillez d√©marrer votre API **`auths`**.\r\n\r\nOn va utiliser REST Client pour tester ces nouvelles op√©rations.\r\n\r\nVeuillez cr√©er le fichier **`/REST Client/auths.http`** et y ajouter le code suivant :\r\n```http\r\n@baseUrl = http://localhost:3000\r\n\r\n### Try to login an unknow user\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"unknown\",\r\n    \"password\":\"admin\"\r\n}\r\n\r\n### Login the default admin\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin\"\r\n}\r\n\r\n\r\n### Create the manager user\r\nPOST {{baseUrl}}/auths/register\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"manager\",\r\n    \"password\":\"manager\"\r\n}\r\n\r\n### Login the manager user\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"manager\",\r\n    \"password\":\"manager\"\r\n}\r\n```\r\n\r\nVeuillez ex√©cuter les diff√©rentes requ√™tes. Tout devrait fonctionner, vous devriez r√©cup√©rer le username et le token d'un utilisateur authentifi√©.\r\n\r\nPour le fun, nous allons d√©coder un token : \r\n- Veuillez copier le token de ce que renvoie votre API pour la requ√™te de login de l'utilisateur **`manager`** (qqch qui doit ressembler √† une string du genre : **`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1hbmFnZXIiLCJpYXQiOjE2NjEyNDg1MjksImV4cCI6MTc0NzY0ODUyOX0.JvYzM0gtmVkqFr9R3f1Bf6ow_QuyHJY-vedJ39N7JKw`**).\r\n- Veuillez vous rendre sur le site [JWT](https://jwt.io/) et coller votre token dans le champs **`Encoded`**. Dans la colonne **`Decoded`**, vous devriez voir l'algorithme utilis√© par la m√©thode **`sign`**, ainsi que les donn√©es pr√©sentes dans le payload, dont **`\"username\": \"manager\"`** ! \r\n\r\nVous comprenez maintenant pourquoi on n'ajoute pas des secrets dans un token üòâ.\r\n\r\n## Cacher ses secrets\r\n\r\nDans ce cours-ci, vous pouvez, de mani√®re optionnelle, voir comment faire en sorte que le secret,  permettant de signer & v√©rifier les token, ne soit pas pr√©sent sur le web repository de vos API (par exemple ici le mod√®le **`users.js`** hardcode ce secret). En effet, pour des raisons de s√©curit√©, si votre secret est visible pour tous les d√©veloppeurs qui acc√®de √† votre repository public, c'est un probl√®me !\r\n\r\nSi vous souhaitez d√©couvrir comment faire en sorte de rendre invisible des informations sensibles sur un web repository, tout en pouvant b√©n√©ficiant de ces infos dans votre environnement de d√©veloppement, vous pouvez consulter la partie 3 du cours sur la [Protection de ses secrets](../../part3/#üç¨_protection_de_ses_secrets).\r\n\r\n# <InternalPageTitle> Autorisation et v√©rification de token </InternalPageTitle>\r\n\r\n## M√©canisme d'autorisation d'utilisateurs √† des op√©rations d'une API \r\n\r\n### Intro\r\n\r\nDans le workflow que nous avons choisi, les utilisateurs re√ßoivent un token lors du **`register`** ou du **`login`**. C'est le job de l'application cliente de trouver un moyen de sauvegarder ce token. \r\n\r\nLorsqu'une application client souhaite cr√©er une pizza, on souhaite autoriser cette op√©ration qu'√† l'administrateur du site g√©rant la pizz√©ria.  \r\nNous d√©cidons donc pour l'**op√©ration de cr√©ation de pizza que l'utilisateur doit** non seulement √™tre **authentifi√©**, mais qu'en plus, il doit √™tre l'**admin** du site.\r\n\r\n### M√©canisme d'autorisation quand le token JWT est valide\r\n\r\nPour que l'application client qui fait la requ√™te √† l'API puisse s'autoriser, elle doit ajouter un **`authorization header`** √† sa requ√™te contenant comme valeur le token re√ßu lors du **`login`** ou du **`register`** :\r\n\r\n<ScrollableImage name=\"authorizeOK.png\" minWidth=\"879px\" maxWidth=\"879x\" />\r\n<figcaption>Appel √† une op√©ration d'une RESTful API n√©cessitant une autorisation JWT : autorisation valide</figcaption>\r\n\r\nLe router de \"pizzas\", avant m√™me de passer la requ√™te √† la route **`POST /pizzas`**, va lancer la fonction middleware d'autorisation nomm√©e **`authorize`**. La fonction middleware **`authorize`** va s'occuper de v√©rifier le token envoy√© par le client dans un header √† l'aide de la m√©thode **`verifiy`** de l'objet **`jwt`** (de la librairie **`jsonwebtoken`**).\r\n\r\nüí≠ Si le token est valide, est-ce que √ßa signifie que l'utilisateur est bien authentifi√© ?  \r\n*H√© bien non, car imaginez qu'entre le moment o√π l'utilisateur se soit logu√©, il ait √©t√© supprim√© de l'application par un admin... dans ce cas-ci, on ne veut pas l'autoriser √† ajouter une pizza au menu de la pizzeria ! Il n'est p-e m√™me plus un employ√©, il souhaite p-e √©crire du contenu malicieux üò®*\r\n\r\nDonc si le token est valide, **`authorize`** fera appel au mod√®le de **`users`** pour v√©rifier que l'utilisateur existe bien dans le support de donn√©es (fichiers JSON, base de donn√©es ou autres) et pour obtenir toutes les infos sur cet utilisateur. Si l'utilisateur existe, alors cela signifie que l'utilisateur est bien authentifi√©. La fonction middleware **`authorize`** va passer la main √† une autre fonction middleware pour v√©rifier que l'utilisateur est bien l'admin.\r\n\r\nüí≠ Comment est-ce que **`authorize`** peut faire appel au mod√®le pour v√©rifier que l'utilisateur existe bien ? Est-ce que cela signifie que le token doit contenir tout un tas de donn√©es sur l'utilisateur ?\r\n\r\nüëç En r√®gle g√©n√©rale, on va juste mettre un identifiant de l'utilisateur dans ce qu'on appelle le **payload** du token. C'est ensuite l'API, suite au d√©codage de l'identifiant de l'utilisateur, qui fera appel aux donn√©es pour retrouver tout ce qui concerne l'utilisateur.\r\n\r\nLa fonction middleware **`isAdmin`** va v√©rifier que l'utilisateur est bien l'admin. Si c'est OK, elle passera la main √† la fonction middleware qui g√®re la route **`POST /pizzas`** au sein du router de pizzas en faisant l'appel √† la fonction **`next`**.  \r\n*üç¨ NB : on pourrait aussi laisser la fonction **`createOnePizza`** s'occuper de v√©rifier que l'utilisateur demandant la cr√©ation de la pizza soit bien l'admin. Ici, comme il s'agit de v√©rifier que le contrat de l'API soit respect√©, c'est-√†-dire que l'utilisateur soit bien authentifi√© & admin, alors on pr√©f√®re r√©aliser cette action en dehors du mod√®le. Dans nos choix architecturaux pour nos RESTful API, nous avons d√©cid√© que ce n'est pas le mod√®le qui s'occupe de pr√©senter les donn√©es aux clients, c'est le r√¥le des routers (et les fonctions middleware associ√©es).*\r\n\r\nMaintenant que le client a les bons privil√®ges, l'op√©ration de cr√©ation de la pizza peut donc √™tre autoris√©e. L'op√©ration de **`createOnePizza`** du mod√®le renverra la nouvelle pizza au router qui s'occupera de pr√©senter la nouvelle pizza au client, au format JSON.\r\n\r\n### M√©canisme d'autorisation quand le token JWT est invalide\r\n\r\nVoici le workflow d'autorisation si le token n'est pas valide :\r\n\r\n<ScrollableImage name=\"authorizeNOK.png\" minWidth=\"879px\" maxWidth=\"879x\" />\r\n<figcaption>Appel √† une op√©ration d'une RESTful API n√©cessitant une autorisation JWT : autorisation invalide</figcaption>\r\n\r\nDans ce cas l√†, **`authorize`** ne passe pas la main √† **`isAdmin`** ni m√™me √† la fonction middleware qui g√®re la route **`POST /pizzas`**.  \r\nLa fonction middleware **`authorize`** renvoie directement un code d'erreur **`401 Unauthorized`** au client. \r\n\r\n### M√©canisme d'autorisation quand l'utilisateur n'est pas admin\r\n\r\nVous pourriez aussi imaginer le workflow o√π le client envoie un token valide, mais l'utilisateur associ√© n'est pas admin. Dans ce cas-ci, **`authorize`** ferait appel √† **`isAdmin`**, mais **`isAdmin`** renverrait directement un code d'erreur **`403 Forbidden`** au client.  \r\nEn effet, l'API indiquerait ainsi qu'elle aurait v√©rifi√© que l'utilisateur est bien authentifi√©, mais que celui ne poss√®de pas les privil√®ges suffisant pour acc√©der √† l'op√©ration demand√©e.\r\n\r\n## Impl√©mentation du m√©canisme d'autorisation\r\n\r\nüò® Wow, le workflow d'autorisation pour la cr√©ation d'une pizza est assez long.  \r\nNous allons maintenant l'impl√©menter dans notre tutoriel en cours.  \r\nNous vous inqui√©tez pas, ce qui importe dans le code qui va suivre, ce n'est pas de savoir √©crire tout le code, mais de bien comprendre les m√©canismes associ√©s. En effet, en r√®gle g√©n√©rale, vous allez utiliser des librairies vous permettant d'autoriser les acc√®s aux op√©rations de vos API. Vous √©crirez donc rarement les m√©canismes d'autorisation, par contre, vous devrez pouvoir les utiliser.\r\n\r\nVeuillez cr√©er les nouvelles fonctions middleware **`authorize`** et **`isAdmin`** au sein d'un nouveau fichier **`/utils/auths.js`** :\r\n```js numbered highlighting=\"1,4,7,11-12,18\"\r\nconst jwt = require('jsonwebtoken');\r\nconst { readOneUserFromUsername } = require('../models/users');\r\n\r\nconst jwtSecret = 'ilovemypizza!';\r\n\r\nconst authorize = (req, res, next) => {\r\n  const token = req.get('authorization');\r\n  if (!token) return res.sendStatus(401);\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, jwtSecret);\r\n    const { username } = decoded;\r\n\r\n    const existingUser = readOneUserFromUsername(username);\r\n\r\n    if (!existingUser) return res.sendStatus(401);\r\n\r\n    req.user = existingUser; // request.user object is available in all other middleware functions\r\n    return next();\r\n  } catch (err) {\r\n    console.error('authorize: ', err);\r\n    return res.sendStatus(401);\r\n  }\r\n};\r\n\r\nconst isAdmin = (req, res, next) => {\r\n  const { username } = req.user;\r\n\r\n  if (username !== 'admin') return res.sendStatus(403);\r\n  return next();\r\n};\r\n\r\nmodule.exports = { authorize, isAdmin };\r\n```\r\n\r\nVoici quelques explications sur le code de la fonction middleware **`authorize`** : \r\n- Gr√¢ce √† **`req.get('authorization')`** (ligne 7), on r√©cup√®re le token qui a √©t√© envoy√© par le client au sein de l'**`authorization header`** de la requ√™te sous forme de string.\r\n- La m√©thode **`jwt.verify(token, jwtSecret)`** (ligne 11) v√©rifie tant la signature du token que son √©ventuelle expiration. Elle utilise le secret **`jwtSecret`** qui doit √™tre le m√™me que celui pris en compte lors de la cr√©ation du token.\r\n- Elle charge toutes les donn√©es de l'utilisateur authentifi√© au sein de l'objet **`req`** (ligne 18), dans **`user`**. Cela est une bonne pratique, cela permet, pour toute la dur√©e du traitement de cette requ√™te, de mettre √† disposition ces donn√©es √† toutes les fonctions middleware.    \r\nüí≠ Mais pourquoi faire cela ?\r\n*Imaginez que vous faites un appel √† une base de donn√©es externes √† chaque fois que vous souhaitez obtenir les informations d'un utilisateur... Cela est tr√®s consommateur en temps... Lorsque vous allez utiliser d'autres fonctions middleware comme **`isAdmin`**, vous n'avez plus besoin de faire appel √† la base de donn√©es.*\r\n\r\nLa fonction middleware **`isAdmin`** r√©cup√®re les donn√©es de l'utilisateur authentifi√© via l'objet **`req.user`**.  \r\nSi l'utilisateur n'est pas **`admin`**, c'est le code **`403 Forbidden`** qui est renvoy√© √† l'application cliente, signifiant que l'utilisateur est bien authentifi√©, mais il n'a pas les privil√®ges pour acc√©der √† l'op√©ration demand√©e (cr√©ation de pizza).  \r\nSi tout est OK, **`isAdmin`** fait appel √† **`next()`**, ce qui consiste √† ex√©cuter la prochaine fonction middleware qui est pr√©sente apr√®s l'appel de **`isAdmin`**.\r\n\r\nO√π allons-nous utiliser ces nouvelles fonctions middleware ?\r\n\r\nNous pouvons le faire au niveau que nous souhaitons, soit au niveau :\r\n- de l'**application**, pour toutes les routes, via **`app.use(authorize)`**.\r\n- d'un **router**, pour toutes les routes associ√©es ; par exemple, on pourrait dire que toutes les routes du router de pizzas sont prot√©g√©es par une autorisation JWT. On √©crirait : **`app.use(\"/pizzas\", authorize, pizzaRouter);`**.  \r\nCela signifierait que toutes les op√©rations sur des ressources de type \"pizzas\" ne seraient autoris√©es que si l'utilisateur √©tait authentifi√©. Cela serait probl√©matique pour deux raisons :\r\n    - On veut pouvoir afficher le menu des pizzas pour tous les utilisateurs, m√™me s'ils sont anonymes.\r\n    - On ne veut pas simplement v√©rifier qu'un utilisateur est authentifi√© pour cr√©er une pizza, on veut aussi v√©rifier qu'il est admin.\r\n- d'une route, pour une op√©ration de notre RESTful API. C'est ce que nous souhaitons faire ici. Veuillez mettre √† jour le code du router de \"pizzas\" au sein de **`/routes/pizzas.js`** :\r\n```js highlighting=\"2,7\"\r\n// See existing code\r\nconst { authorize, isAdmin } = require('../utils/auths');\r\n\r\n// See existing code\r\n\r\n// Create a pizza to be added to the menu.\r\nrouter.post('/', authorize, isAdmin, (req, res) => {\r\n  const title = req?.body?.title?.length !== 0 ? req.body.title : undefined;\r\n  const content = req?.body?.content?.length !== 0 ? req.body.content : undefined;\r\n\r\n  if (!title || !content) return res.sendStatus(400); // error code '400 Bad request'\r\n\r\n  const createdPizza = createOnePizza(title, content);\r\n\r\n  return res.json(createdPizza);\r\n});\r\n```\r\n\r\nAinsi, nous avons juste fait l'appel de deux fonctions middleware pour v√©rifier :\r\n- **que l'utilisateur est authentifi√©** via **`authorize`** ; si tout est OK au niveau du token fournit par l'application cliente, **`authorize`** fait appel via **`next()`** √† la prochaine fonction middleware. Dans ce cas-ci, c'est **`isAdmin`**. S'il y a un probl√®me, **`authorize`** termine le traitement de la requ√™te en envoyant un code d'erreur au client et les prochaines fonctions middleware (**`isAdmin`**, puis la fonction **`arrow`**) ne sont pas ex√©cut√©es.\r\n- **que l'utilisateur est admin** via **`isAdmin`** ; si tout est OK, que l'utilisateur authentifi√© est l'admin, **`isAdmin`** fait appel via **`next()`** √† la prochaine fonction middleware. Dans ce cas-ci, c'est la fonction **`arrow`** qui appelle l'op√©ration demand√©e pour cr√©er la pizza : **`createOnePizza`**. Si l'utilisateur authentifi√© n'est pas l'admin, alors **`isAdmin`** termine le traitement en envoyant un code d'erreur au client et la fonction traitant de l'op√©ration de cr√©ation n'est pas ex√©cut√©e.\r\n\r\nComment pouvons-nous tester l'op√©ration de cr√©ation d'une pizza ? Via REST Client.\r\nTentons le coup √† l'aide de cette requ√™te (elle est d√©j√† pr√©sente dans **/REST Client/pizzas.http**) :\r\n```http\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n```\r\n\r\nApr√®s avoir ex√©cut√© cette requ√™te, vous devriez avoir re√ßu un status code **`401 Unauthorized`**.\r\nC'est normal, comme nous n'avons pas envoy√© de token, nous ne pouvons donc pas √™tre autoris√©.  \r\nAu prochain point nous allons voir comment utiliser REST Client pour sauvegarder de l'information, comme un token, suite √† une requ√™te vers une API.\r\n\r\n# <InternalPageTitle> Client REST avec JWT </InternalPageTitle>\r\n\r\nPr√©c√©demment, nous avons appris √† utiliser REST Client, l'extension de VS Code, pour faire des requ√™tes vers des API.\r\n\r\nVoici quelques notions suppl√©mentaire pour utiliser REST Client avec des **`JWT`** :\r\n- Il est possible de cr√©er des **`Request Variables`** afin de **r√©cup√©rer la r√©ponse** associ√©e \r\n√† une requ√™te au sein d'une variable.\r\n- On va donc pouvoir r√©cup√©rer le token, suite √† une requ√™te d'authentification, \r\nau sein d'une **`Request Variable`**, pour ensuite fournir ce token dans le **`Authorization header`** de toutes les requ√™tes demandant une autorisation JWT.\r\n\r\nSi vous souhaitez plus d'infos sur les **`Request Variables`**, vous pouvez consulter la [documentation de REST Client](https://github.com/Huachao/vscode-restclient#request-variables) [[R.55]](/references/#r55).\r\n\r\nVoici comment mettre √† jour le script **`/REST Client/pizzas.http`** pour cr√©er une pizza en passant le token de l'utilisateur **`admin`** :\r\n\r\n```http\r\n### Create a pizza by using the admin account\r\n#### First login as the admin\r\n##### Define a request variable nammed admin :\r\n# @name admin\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin\"\r\n}\r\n\r\n#### Create a pizza with the admin token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\nAuthorization: {{admin.response.body.token}}\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n```\r\n\r\nPour tester l'op√©ration de cr√©ation de pizza, veuillez d'abord ex√©cuter la premi√®re requ√™te, puis la seconde donn√©e ci-dessus.\r\n\r\nA ce stade-ci, il serait aussi int√©ressant de tester certains cas d'erreurs associ√©s aux tokens. Veuillez compl√©ter le script **`/REST Client/pizzas.http`** avec :\r\n```http\r\n### 1. Create a pizza without a token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### 2. Create a pizza without being the admin, use manager account\r\n#### 2.1 First login as the manager\r\n##### 2.1.1 Define a request variable nammed manager\r\n# @name manager\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"manager\",\r\n    \"password\":\"manager\"\r\n}\r\n\r\n##### 2.1.2 Define a file variable to simplify the access to the token of manager\r\n@managerToken = {{manager.response.body.token}}\r\n\r\n#### 2.2 Try to create a pizza with the manager token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\nAuthorization: {{managerToken}}\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n```\r\n\r\nNous voyons qu'√† l'aide de REST Client, nous pouvons utiliser une **`File Variable`** pour allouer une partie de la r√©ponse faite √† une requ√™te.  \r\nDans ce cas, on peut faire appel √† l'API en passant le token via la **`File Variable`** nomm√© **`managerToken`** (code associ√© : **`Authorization: {{managerToken}}`**) au lieu d'utiliser une partie seulement de la **`Request Variable`** nomm√©e **`manager`** (code possible : **`Authorization: {{manager.response.body.token}}`**).  \r\nCela permet de cr√©er des requ√™tes plus concises.\r\n\r\n# <InternalPageTitle> Protection des op√©rations d'√©criture d'une API </InternalPageTitle>\r\n\r\nVeuillez mettre √† jour votre RESTful API g√©rant les pizzas afin que toutes les op√©rations d'√©criture soient prot√©g√©es par une autorisation JWT, n'autorisant que l'utilisateur **admin**.\r\n\r\nVoici le code √† mettre √† jour dans **`/routes/pizzas`** pour correctement autoriser les op√©rations de suppression et de modification sur des ressources de type \"pizzas\":\r\n```js highlighting=\"2,11\"\r\n// Delete a pizza from the menu based on its id\r\nrouter.delete('/:id', authorize, isAdmin, (req, res) => {\r\n  const deletedPizza = deleteOnePizza(req.params.id);\r\n\r\n  if (!deletedPizza) return res.sendStatus(404);\r\n\r\n  return res.json(deletedPizza);\r\n});\r\n\r\n// Update a pizza based on its id and new values for its parameters\r\nrouter.patch('/:id', authorize, isAdmin, (req, res) => {\r\n  const title = req?.body?.title;\r\n  const content = req?.body?.content;\r\n\r\n  if ((!title && !content) || title?.length === 0 || content?.length === 0) {\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  const updatedPizza = updateOnePizza(req.params.id, { title, content });\r\n\r\n  if (!updatedPizza) return res.sendStatus(404);\r\n\r\n  return res.json(updatedPizza);\r\n});\r\n```\r\n\r\nPour vous assurer que les op√©rations de suppression et de modification sont bien fonctionnelles, veuillez mettre √† jour les requ√™tes associ√©es afin d'utiliser un token. Veuillez mettre √† jour **`/REST Client/pizzas.http`** en ajoutant ces deux lignes :\r\n\r\n```http numbered highlighting=\"25,30\"\r\n### Create a pizza by using the admin account\r\n#### First login as the admin\r\n##### Define a request variable nammed admin\r\n# @name admin\r\nPOST {{baseUrl}}/auths/login\r\nContent-Type: application/json\r\n\r\n{\r\n    \"username\":\"admin\",\r\n    \"password\":\"admin\"\r\n}\r\n\r\n#### Create a pizza with the admin token\r\nPOST {{baseUrl}}/pizzas\r\nContent-Type: application/json\r\nAuthorization: {{admin.response.body.token}}\r\n\r\n{\r\n    \"title\":\"Magic Green\",\r\n    \"content\":\"Epinards, Brocolis, Olives vertes, Basilic\"\r\n}\r\n\r\n### Delete pizza identified by 2 with the admin token\r\nDELETE {{baseUrl}}/pizzas/2\r\nAuthorization: {{admin.response.body.token}}\r\n\r\n### Update the pizza identified by 6 with the admin token\r\nPATCH {{baseUrl}}/pizzas/6\r\nContent-Type: application/json\r\nAuthorization: {{admin.response.body.token}}\r\n\r\n{\r\n    \"title\":\"Magic Green 2\"\r\n}\r\n```\r\n\r\nVeuillez ex√©cutez les requ√™tes de type **DELETE** et de type **PATCH** afin de vous assurer que l'API est en ordre.\r\n\r\nSi tout fonctionne bien, faites un **`commit`** de votre repo (**`web2`**) avec comme message :\r\n**`api auths tutorial`**.\r\n\r\nEn cas de souci, vous pouvez utiliser le code du tutoriel [api-auths](https://github.com/e-vinci/js-demos/tree/main/backend-restful-api/restful-api-essentials/auths).\r\n\r\n# <InternalPageTitle> Project 4.1 : Authentification & autorisation d'op√©rations </InternalPageTitle>\r\n\r\nVous devez mettre √† jour l'API d√©velopp√©e pour [Project 2.18](../../part2/comms-security/#project_2_18_autorisation_de_nouvelles_origines) afin de s√©curiser certaines op√©rations par JWT.\r\n\r\nLe code doit se trouver dans votre repository local et votre web repository (normalement appel√© **`web2`**) dans le r√©pertoire nomm√© **`/project/4.1/api`** sur base d'un copier/coller du code de [Project 2.18](../../part2/comms-security/#project_2_18_autorisation_de_nouvelles_origines).\r\n\r\nIl est possible que dans le cadre de votre projet, vous n'ayez pas besoin d'authentifier des utilisateurs afin de prot√©ger l'acc√®s √† certaines op√©rations sur des ressources.\r\n\r\nSi c'est le cas, il est quand m√™me important d'apprendre les concepts associ√©s √† l'authentification et √† l'autorisation JWT. Veuillez donc d√©velopper un prototype d'application qui n√©cessiterait une authentification, ainsi qu'au moins une op√©ration qui devrait √™tre autoris√©e.\r\n\r\nSi vous n'avez pas d'id√©e, vous pourriez simplement d√©velopper un prototype permettant d'entrer des commentaires sur votre site web et de les visualiser.\r\n\r\nDans un premier temps, veuillez identifier toutes les op√©rations mises √† disposition par votre API, ainsi que si celles-ci sont prot√©g√©es par JWT, au sein du fichier **`README.md`** (fichier Markdown) de votre projet. Voici un exemple de comment nous vous recommandons de documenter votre API, sous forme de tableau : \r\n\r\n| URI | M√©thode HTTP | Auths? | Op√©ration |\r\n|---|---|---|---|\r\n| **`films`** | GET | Non | READ ALL : Lire toutes les ressources de la collection |\r\n| **`comments`** | GET | JWT | READ ALL FILTERED : Lire toutes les ressources de la collection |\r\n| **`comments`** | POST | JWT | CREATE ONE : Cr√©er une ressource bas√©e sur les donn√©es de la requ√™te |\r\n| ... | ... | ... | ... |\r\n\r\n<br/>\r\n\r\n<AuthenticatedBlock>\r\n\r\nVeuillez travailler avec les membres de votre groupe et vous partager le travail.\r\n\r\nUn peu avant la fin de la s√©ance, veuillez discuter :\r\n- du lien entre les UCs que vous avez identifi√©s en d√©but de projet et les op√©rations de votre API.\r\n- des difficult√©s rencontr√©es, de ce que vous avez appris...\r\n\r\n</AuthenticatedBlock>\r\n\r\nVous devez tester toutes les nouvelles op√©rations que vous prot√©gez par une autorisation JWT √† l'aide de Rest Client.\r\n\r\nQuand un prototype d'api est finalis√© et test√©, veuillez faire un **`commit`** de votre code avec comme message : **`4.1 : api JWT auths`**.\r\n\r\n#### ü§ù Tips\r\nComment cr√©er un tableau dans un fichier Markdown (pour **`README.md`**) ?  \r\nVoici deux options :\r\n- Soit vous utiliser des **`|`** pour d√©limiter les cellules et des **`|---|`** pour s√©parer \r\nles headers du corps du tableau. \r\nVoici le Markdown de l'exemple donn√© ci-dessus :\r\n```text\r\n| URI | M√©thode HTTP | Auths? | Op√©ration |\r\n|---|---|---|---|\r\n| **`films`** | GET | Non | READ ALL : Lire toutes les ressources de la collection |\r\n| **`comments`** | GET | JWT | READ ALL FILTERED : Lire toutes les ressources de la collection |\r\n| **`comments`** | POST | JWT | CREATE ONE : Cr√©er une ressource bas√©e sur les donn√©es de la requ√™te |\r\n| ... | ... | ... | ... |\r\n```\r\n- Soit c'est simplement un tableau HTML (`<table>`).\r\n\r\nComment ajouter l'authentification et l'autorisation JWT au sein de votre projet ?\r\n- Soit vous partez du boilerplate du cours offrant l'authentification et l'autorisation JWT : [jwt-api-boilerplate](https://github.com/e-vinci/jwt-api-boilerplate). \r\nPuis vous pouvez y int√©grer le code d√©velopp√©e pour [Project 2.18](../../part2/comms-security/#project_2_18_autorisation_de_nouvelles_origines).\r\n- Soit vous refaites les √©tapes du tutoriel dans cette page en partant du code d√©velopp√© pour [Project 2.18](../../part2/comms-security/#project_2_18_autorisation_de_nouvelles_origines).\r\n\r\n# <InternalPageTitle> Project 4.22 : Authentification & autorisation d'op√©rations </InternalPageTitle>","fields":{"slug":"/part4/auths-api/"},"frontmatter":{"title":"JWT auths API","date":null,"navbarExtraStyles":"","headerImage":"","featuredImage":"","description":"Authentification et autorisation d'acc√®s aux op√©rations d'une RESTful API via JWT","autoMargin":true}},"allImages":{"edges":[{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png","srcSet":"/web2/static/19c44353d690d2192603058b13677c32/050f3/ex2-16-questions.png 370w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/19c44353d690d2192603058b13677c32/89e9c/ex2-16-questions.webp 370w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.908108108108108}},"base":"ex2-16-questions.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png","srcSet":"/web2/static/7746eb8f2da2b173501f76b41b709419/31045/ex2-16-score.png 268w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/7746eb8f2da2b173501f76b41b709419/adc83/ex2-16-score.webp 268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.49253731343283585}},"base":"ex2-16-score.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#683898","images":{"fallback":{"src":"/web2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png","srcSet":"/web2/static/53aa06cf17e4239d0dba6ffd09854e02/0cbce/icon.png 512w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/53aa06cf17e4239d0dba6ffd09854e02/cc23f/icon.webp 512w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"icon.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/web2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png","srcSet":"/web2/static/94e78cdb1293988b357eb1e6074279d9/8cffc/join.png 26w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/94e78cdb1293988b357eb1e6074279d9/2705a/join.webp 26w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.0769230769230769}},"base":"join.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png","srcSet":"/web2/static/309e0fb8b4416829acfed4f7a501206b/98149/logo_vinci.png 544w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/309e0fb8b4416829acfed4f7a501206b/5eade/logo_vinci.webp 544w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9044117647058824}},"base":"logo_vinci.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e848","images":{"fallback":{"src":"/web2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png","srcSet":"/web2/static/814c6001016da3a407035f4cfb117ea5/61ec1/quit.png 28w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/814c6001016da3a407035f4cfb117ea5/fad8c/quit.webp 28w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.9285714285714286}},"base":"quit.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png","srcSet":"/web2/static/4231407aeb2eab1eb26748522a49f119/1daa6/js-evolution.png 505w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/4231407aeb2eab1eb26748522a49f119/1d9c9/js-evolution.webp 505w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3702970297029703}},"base":"js-evolution.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d88848","images":{"fallback":{"src":"/web2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg","srcSet":"/web2/static/c4a1984e0b0ce60b9f9f72756293a96e/50940/frontend-technos.jpg 461w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/c4a1984e0b0ce60b9f9f72756293a96e/9d85c/frontend-technos.webp 461w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5553145336225597}},"base":"frontend-technos.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#a8c888","images":{"fallback":{"src":"/web2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png","srcSet":"/web2/static/62895fac28825996f4895ee798c3c5da/ddebf/modules-breakdown.png 750w,\n/web2/static/62895fac28825996f4895ee798c3c5da/964cf/modules-breakdown.png 1056w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/62895fac28825996f4895ee798c3c5da/f59f5/modules-breakdown.webp 750w,\n/web2/static/62895fac28825996f4895ee798c3c5da/280c1/modules-breakdown.webp 1056w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3759469696969697}},"base":"modules-breakdown.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#081828","images":{"fallback":{"src":"/web2/static/06eb14b228d7c6bc28668b2465327811/63bac/most-pop-programming.png","srcSet":"/web2/static/06eb14b228d7c6bc28668b2465327811/63bac/most-pop-programming.png 516w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/06eb14b228d7c6bc28668b2465327811/a81b8/most-pop-programming.webp 516w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8507751937984497}},"base":"most-pop-programming.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png","srcSet":"/web2/static/fa47b7868326f417638155af9c4e1131/1f5ea/mpa-api.png 750w,\n/web2/static/fa47b7868326f417638155af9c4e1131/a19b7/mpa-api.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/fa47b7868326f417638155af9c4e1131/98a4a/mpa-api.webp 750w,\n/web2/static/fa47b7868326f417638155af9c4e1131/b3688/mpa-api.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"mpa-api.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png","srcSet":"/web2/static/0db4cabf70d03ffdaba26ad2279a1f03/36fe5/mpa.png 540w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/0db4cabf70d03ffdaba26ad2279a1f03/94f16/mpa.webp 540w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7259259259259259}},"base":"mpa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png","srcSet":"/web2/static/df3eb96d3792fedc90e824b9ff4ee666/9aa96/spa-monolithic.png 541w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/df3eb96d3792fedc90e824b9ff4ee666/65253/spa-monolithic.webp 541w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7245841035120149}},"base":"spa-monolithic.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png","srcSet":"/web2/static/e927b7d4c1aab1dd521632761a53f1b6/1f5ea/spa.png 750w,\n/web2/static/e927b7d4c1aab1dd521632761a53f1b6/a19b7/spa.png 847w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/e927b7d4c1aab1dd521632761a53f1b6/98a4a/spa.webp 750w,\n/web2/static/e927b7d4c1aab1dd521632761a53f1b6/b3688/spa.webp 847w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4628099173553719}},"base":"spa.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png","srcSet":"/web2/static/593d65b45ead31d08b777b977530fbb0/257c8/form.png 182w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/593d65b45ead31d08b777b977530fbb0/aa09a/form.webp 182w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1868131868131868}},"base":"form.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png","srcSet":"/web2/static/a4d45cc8f767378935f1a47c6a814bff/c4448/table.png 219w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/a4d45cc8f767378935f1a47c6a814bff/5ce26/table.webp 219w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.547945205479452}},"base":"table.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/web2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png","srcSet":"/web2/static/995b19933afe2efc8abdad9e056f7eb0/c35a8/terminal-1.png 481w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/995b19933afe2efc8abdad9e056f7eb0/8a064/terminal-1.webp 481w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2390852390852392}},"base":"terminal-1.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png","srcSet":"/web2/static/14110746b5f49459429c355815cd77b3/eb8cd/express-flow.png 750w,\n/web2/static/14110746b5f49459429c355815cd77b3/10f52/express-flow.png 800w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/14110746b5f49459429c355815cd77b3/4e646/express-flow.webp 750w,\n/web2/static/14110746b5f49459429c355815cd77b3/130b6/express-flow.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3825}},"base":"express-flow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/web2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png","srcSet":"/web2/static/ec94e10b96163ba7dff989c8073526c9/d328f/terminal-2.png 750w,\n/web2/static/ec94e10b96163ba7dff989c8073526c9/e4d4e/terminal-2.png 933w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/ec94e10b96163ba7dff989c8073526c9/dea86/terminal-2.webp 750w,\n/web2/static/ec94e10b96163ba7dff989c8073526c9/92d06/terminal-2.webp 933w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2722400857449089}},"base":"terminal-2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#c8e8d8","images":{"fallback":{"src":"/web2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg","srcSet":"/web2/static/5c1c4cd476b1911739976c74d5457e03/60e67/middlewares.jpg 638w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/5c1c4cd476b1911739976c74d5457e03/f273c/middlewares.webp 638w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7288401253918495}},"base":"middlewares.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png","srcSet":"/web2/static/4af4b8ccca63d0a981c68a20bb9658e1/cc4c8/techno-course.png 721w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/4af4b8ccca63d0a981c68a20bb9658e1/7f7c1/techno-course.webp 721w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5575589459084604}},"base":"techno-course.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png","srcSet":"/web2/static/dbf7fef0d0623475d157204fd950008e/cbf92/techno.png 586w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/dbf7fef0d0623475d157204fd950008e/09c5a/techno.webp 586w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8464163822525598}},"base":"techno.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png","srcSet":"/web2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/3b3b8/cors-issue.png 750w,\n/web2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/718a6/cors-issue.png 1031w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/148ba/cors-issue.webp 750w,\n/web2/static/6b82e2d24f2e455ab5f6479f8f0fd34c/53c8e/cors-issue.webp 1031w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.29582929194956353}},"base":"cors-issue.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8e8e8","images":{"fallback":{"src":"/web2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png","srcSet":"/web2/static/cd7a86517cd86bf67e97a9455782f61e/3a7c2/errors.png 589w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/cd7a86517cd86bf67e97a9455782f61e/8d14e/errors.webp 589w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.43803056027164683}},"base":"errors.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png","srcSet":"/web2/static/a0a9be40f52062756989e43e359b5c44/96859/liveServerFrontSPA.png 750w,\n/web2/static/a0a9be40f52062756989e43e359b5c44/4ca31/liveServerFrontSPA.png 751w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/a0a9be40f52062756989e43e359b5c44/3f918/liveServerFrontSPA.webp 750w,\n/web2/static/a0a9be40f52062756989e43e359b5c44/61905/liveServerFrontSPA.webp 751w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4274300932090546}},"base":"liveServerFrontSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png","srcSet":"/web2/static/9482be8bcc11374b223c4bff1aaa7cef/44ede/movies.png 750w,\n/web2/static/9482be8bcc11374b223c4bff1aaa7cef/c97ea/movies.png 1080w,\n/web2/static/9482be8bcc11374b223c4bff1aaa7cef/6c4d1/movies.png 1268w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/9482be8bcc11374b223c4bff1aaa7cef/9378c/movies.webp 750w,\n/web2/static/9482be8bcc11374b223c4bff1aaa7cef/6e0c3/movies.webp 1080w,\n/web2/static/9482be8bcc11374b223c4bff1aaa7cef/498dd/movies.webp 1268w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.38564668769716093}},"base":"movies.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png","srcSet":"/web2/static/04662f2f0ed1b78bd5ead2c3dec85482/36714/readPizzas.png 523w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/04662f2f0ed1b78bd5ead2c3dec85482/dfd8f/readPizzas.webp 523w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.7304015296367113}},"base":"readPizzas.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png","srcSet":"/web2/static/945336ab536627610c9e7fa03999caa2/746ba/proxy.png 691w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/945336ab536627610c9e7fa03999caa2/03d38/proxy.webp 691w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6353111432706222}},"base":"proxy.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png","srcSet":"/web2/static/8eb2b12643e10670a4e4234ccd8a844e/613e6/xss.png 750w,\n/web2/static/8eb2b12643e10670a4e4234ccd8a844e/103d4/xss.png 1080w,\n/web2/static/8eb2b12643e10670a4e4234ccd8a844e/3d704/xss.png 1108w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/8eb2b12643e10670a4e4234ccd8a844e/18c9f/xss.webp 750w,\n/web2/static/8eb2b12643e10670a4e4234ccd8a844e/51d3a/xss.webp 1080w,\n/web2/static/8eb2b12643e10670a4e4234ccd8a844e/88976/xss.webp 1108w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.2842960288808664}},"base":"xss.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png","srcSet":"/web2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/8770b/authorizeNOK.png 750w,\n/web2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/e5078/authorizeNOK.png 809w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/35881/authorizeNOK.webp 750w,\n/web2/static/ce4d88f5a75edb2b72efaaa71f7b0efc/a88f0/authorizeNOK.webp 809w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6093943139678616}},"base":"authorizeNOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d8d8","images":{"fallback":{"src":"/web2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png","srcSet":"/web2/static/02183504e2708ac3e446f29003c8d7bc/60bc5/hacked.png 744w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/02183504e2708ac3e446f29003c8d7bc/67170/hacked.webp 744w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4206989247311828}},"base":"hacked.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png","srcSet":"/web2/static/d5538808d9455e309732cc72d3c16094/5a8ae/bom.png 361w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/d5538808d9455e309732cc72d3c16094/44051/bom.webp 361w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8531855955678671}},"base":"bom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png","srcSet":"/web2/static/13b65def72e9840d86bcf161d0140f2d/8d835/places.png 750w,\n/web2/static/13b65def72e9840d86bcf161d0140f2d/9b397/places.png 1080w,\n/web2/static/13b65def72e9840d86bcf161d0140f2d/c1308/places.png 1366w,\n/web2/static/13b65def72e9840d86bcf161d0140f2d/487a4/places.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/13b65def72e9840d86bcf161d0140f2d/25f33/places.webp 750w,\n/web2/static/13b65def72e9840d86bcf161d0140f2d/f7d3e/places.webp 1080w,\n/web2/static/13b65def72e9840d86bcf161d0140f2d/cab24/places.webp 1366w,\n/web2/static/13b65def72e9840d86bcf161d0140f2d/e838a/places.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"places.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png","srcSet":"/web2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/e81f3/browser.png 750w,\n/web2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/05d72/browser.png 815w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/7c1ed/browser.webp 750w,\n/web2/static/bb50b3e7a8b2a2cd37a9f3e8139a8d34/9c789/browser.webp 815w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6269938650306749}},"base":"browser.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif","srcSet":"/web2/static/815bb84493b798e20f6e050fe7d4f297/8ac59/bytes.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/815bb84493b798e20f6e050fe7d4f297/fa94f/bytes.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8041095890410959}},"base":"bytes.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png","srcSet":"/web2/static/8336698fa5a4150652bf24675d81d450/b818d/console.png 584w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/8336698fa5a4150652bf24675d81d450/2cd0a/console.webp 584w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5941780821917808}},"base":"console.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#181818","images":{"fallback":{"src":"/web2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png","srcSet":"/web2/static/a2704f93c050f1b8f0af184bca0784e5/bfbd8/copy.png 41w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/a2704f93c050f1b8f0af184bca0784e5/54421/copy.webp 41w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.048780487804878}},"base":"copy.PNG"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif","srcSet":"/web2/static/20e0138ec54042c9ab8df2df718b51c7/ad8b1/cssom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/20e0138ec54042c9ab8df2df718b51c7/4fc4f/cssom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"cssom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif","srcSet":"/web2/static/7c8ef3e05614d0f1331eb1622972209f/ad8b1/dom.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/7c8ef3e05614d0f1331eb1622972209f/4fc4f/dom.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.3136986301369863}},"base":"dom.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif","srcSet":"/web2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/7d9c5/dom2.gif 486w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/2c0e805dbcef0b4210fddd87f2fdcd0b/3b54a/dom2.webp 486w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5473251028806584}},"base":"dom2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8d818","images":{"fallback":{"src":"/web2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png","srcSet":"/web2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/27b15/js-logo.png 750w,\n/web2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/efde9/js-logo.png 768w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/cfe1c/js-logo.webp 750w,\n/web2/static/9816a79b1cdedb4fd200ae4b1e94ccbd/ea3b7/js-logo.webp 768w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"js-logo.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif","srcSet":"/web2/static/283b4c657f5c4a706c3e29d0a08fd451/7edf3/render.heif 730w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/283b4c657f5c4a706c3e29d0a08fd451/29aef/render.webp 730w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.4383561643835616}},"base":"render.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#282828","images":{"fallback":{"src":"/web2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png","srcSet":"/web2/static/302e83d40f9486ab7ea528e217821223/d5cd3/start.png 511w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/302e83d40f9486ab7ea528e217821223/02192/start.webp 511w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.40117416829745595}},"base":"start.PNG"}},{"node":{"childImageSharp":null,"base":"red-light.gif"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#484848","images":{"fallback":{"src":"/web2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png","srcSet":"/web2/static/d500a235cf91fee0cec65a112a3fd9a8/a166b/backend-frameworks.png 634w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/d500a235cf91fee0cec65a112a3fd9a8/de393/backend-frameworks.webp 634w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5394321766561514}},"base":"backend-frameworks.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png","srcSet":"/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/08018/planning.png 750w,\n/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/b5d65/planning.png 1080w,\n/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/cd171/planning.png 1088w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/f7070/planning.webp 750w,\n/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/6949f/planning.webp 1080w,\n/web2/static/97447aabc0c3f79a34494e5fa4b0b55d/9af3a/planning.webp 1088w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.59375}},"base":"planning.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png","srcSet":"/web2/static/8c454120ed3743524b977a50efee14ae/c33b9/architecture.png 750w,\n/web2/static/8c454120ed3743524b977a50efee14ae/75d45/architecture.png 859w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/8c454120ed3743524b977a50efee14ae/013ea/architecture.webp 750w,\n/web2/static/8c454120ed3743524b977a50efee14ae/3c3f0/architecture.webp 859w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6030267753201397}},"base":"architecture.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png","srcSet":"/web2/static/df999928d139b76e4624212deb47afa1/c60dc/ajax.png 569w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/df999928d139b76e4624212deb47afa1/9f538/ajax.webp 569w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.8927943760984183}},"base":"ajax.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png","srcSet":"/web2/static/368b66a6c71ce7ae5149f7fe124c67b4/aa4e8/independentFrontBackSPA.png 750w,\n/web2/static/368b66a6c71ce7ae5149f7fe124c67b4/dedcf/independentFrontBackSPA.png 914w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/368b66a6c71ce7ae5149f7fe124c67b4/54e6a/independentFrontBackSPA.webp 750w,\n/web2/static/368b66a6c71ce7ae5149f7fe124c67b4/d4860/independentFrontBackSPA.webp 914w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.48468271334792123}},"base":"independentFrontBackSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png","srcSet":"/web2/static/5033887241592124140462a48f880b31/57832/independentFrontBackSPA2.png 750w,\n/web2/static/5033887241592124140462a48f880b31/4c60e/independentFrontBackSPA2.png 852w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/5033887241592124140462a48f880b31/73ed4/independentFrontBackSPA2.webp 750w,\n/web2/static/5033887241592124140462a48f880b31/fa338/independentFrontBackSPA2.webp 852w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5762910798122066}},"base":"independentFrontBackSPA2.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png","srcSet":"/web2/static/4cf8132263a3922a81198d62fa668e8c/9fdee/monolithicSPA.png 750w,\n/web2/static/4cf8132263a3922a81198d62fa668e8c/8af70/monolithicSPA.png 758w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/4cf8132263a3922a81198d62fa668e8c/e02a2/monolithicSPA.webp 750w,\n/web2/static/4cf8132263a3922a81198d62fa668e8c/1677e/monolithicSPA.webp 758w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.712401055408971}},"base":"monolithicSPA.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png","srcSet":"/web2/static/7019197416b607b814455c5cde2bfd8d/8a955/authorizeOK.png 747w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/7019197416b607b814455c5cde2bfd8d/b344d/authorizeOK.webp 747w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}},"base":"authorizeOK.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png","srcSet":"/web2/static/cd56be61925d779c9a23f9ecdea56e09/e56fa/login.png 750w,\n/web2/static/cd56be61925d779c9a23f9ecdea56e09/fb68f/login.png 879w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/cd56be61925d779c9a23f9ecdea56e09/5510b/login.webp 750w,\n/web2/static/cd56be61925d779c9a23f9ecdea56e09/da356/login.webp 879w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5017064846416383}},"base":"login.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#0878b8","images":{"fallback":{"src":"/web2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png","srcSet":"/web2/static/216c8f19b48a13e3af5020937c6495fe/f74f0/deployment.png 750w,\n/web2/static/216c8f19b48a13e3af5020937c6495fe/3f056/deployment.png 881w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/216c8f19b48a13e3af5020937c6495fe/00e18/deployment.webp 750w,\n/web2/static/216c8f19b48a13e3af5020937c6495fe/73e10/deployment.webp 881w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5811577752553916}},"base":"deployment.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg","srcSet":"/web2/static/852194cf7727296de1adabc80b737b1d/24844/critere-eval.jpg 750w,\n/web2/static/852194cf7727296de1adabc80b737b1d/52ccc/critere-eval.jpg 844w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/852194cf7727296de1adabc80b737b1d/ba934/critere-eval.webp 750w,\n/web2/static/852194cf7727296de1adabc80b737b1d/f361e/critere-eval.webp 844w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.2890995260663507}},"base":"critere-eval.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png","srcSet":"/web2/static/ff2054d2907d5ebd494875c12fe16a3d/7cb90/middleware-function.png 750w,\n/web2/static/ff2054d2907d5ebd494875c12fe16a3d/d40cb/middleware-function.png 944w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/ff2054d2907d5ebd494875c12fe16a3d/4ffb0/middleware-function.webp 750w,\n/web2/static/ff2054d2907d5ebd494875c12fe16a3d/6c417/middleware-function.webp 944w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.298728813559322}},"base":"middleware-function.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png","srcSet":"/web2/static/9f49136562a5d771c51d7600430566b1/38d9f/eventflow.png 480w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/9f49136562a5d771c51d7600430566b1/cd74b/eventflow.webp 480w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.1666666666666667}},"base":"eventflow.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#e8e8e8","images":{"fallback":{"src":"/web2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg","srcSet":"/web2/static/d0eb9efdef86cf105b8020519b702c01/e1af2/pizza2.jpg 750w,\n/web2/static/d0eb9efdef86cf105b8020519b702c01/f6ece/pizza2.jpg 800w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/d0eb9efdef86cf105b8020519b702c01/7f694/pizza2.webp 750w,\n/web2/static/d0eb9efdef86cf105b8020519b702c01/4447d/pizza2.webp 800w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6675}},"base":"pizza2.jpg"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/web2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png","srcSet":"/web2/static/11b64c3a36326f1301636f365163fa87/8d835/carousel.png 750w,\n/web2/static/11b64c3a36326f1301636f365163fa87/9b397/carousel.png 1080w,\n/web2/static/11b64c3a36326f1301636f365163fa87/c1308/carousel.png 1366w,\n/web2/static/11b64c3a36326f1301636f365163fa87/487a4/carousel.png 1599w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/11b64c3a36326f1301636f365163fa87/25f33/carousel.webp 750w,\n/web2/static/11b64c3a36326f1301636f365163fa87/f7d3e/carousel.webp 1080w,\n/web2/static/11b64c3a36326f1301636f365163fa87/cab24/carousel.webp 1366w,\n/web2/static/11b64c3a36326f1301636f365163fa87/e838a/carousel.webp 1599w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.35709818636647905}},"base":"carousel.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/web2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png","srcSet":"/web2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/27b15/JSdude.png 750w,\n/web2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/b749b/JSdude.png 1024w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/cfe1c/JSdude.webp 750w,\n/web2/static/e795fd2fb63aea24f1a6ec7e3b46dc57/5e515/JSdude.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}},"base":"JSdude.png"}},{"node":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#d8d8e8","images":{"fallback":{"src":"/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg","srcSet":"/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/b3dd7/pizza.jpg 750w,\n/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/870fe/pizza.jpg 1080w,\n/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/f640e/pizza.jpg 1366w,\n/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/87754/pizza.jpg 1920w","sizes":"100vw"},"sources":[{"srcSet":"/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/2daa0/pizza.webp 750w,\n/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/1aa4f/pizza.webp 1080w,\n/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/8647b/pizza.webp 1366w,\n/web2/static/b1265c3e6f56ce4944170b2dd149f5c7/902b5/pizza.webp 1920w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1.5}},"base":"pizza.jpg"}}]}},"pageContext":{"slug":"/part4/auths-api/","frontmatter":{"title":"JWT auths API","description":"Authentification et autorisation d'acc√®s aux op√©rations d'une RESTful API via JWT"}}},"staticQueryHashes":["1696221415","2461182183","3028011774","3458129946","501654901","575455071","641954533","758242238"],"slicesMap":{}}