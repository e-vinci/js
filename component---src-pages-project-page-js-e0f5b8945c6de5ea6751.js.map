{"version":3,"file":"component---src-pages-project-page-js-e0f5b8945c6de5ea6751.js","mappings":"iJAuDA,IA7CwB,SAAH,GAQd,IAUDA,EASAC,EA1BJC,EAAS,EAATA,UACAC,EAAa,EAAbA,cACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAE,EAAFA,GACAC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SA0BA,OAdIL,EACFH,EAAiBK,EACbI,IAAAA,OAAUJ,GACV,GACGG,EAAUR,EAAiBQ,EAC3BH,IACPL,EAAiBK,EAAeI,IAAAA,OAAUJ,GAAgB,IAG5DJ,EAAaC,GAAwB,GACjCC,IACFF,GAAc,uDACZM,IAAUN,GAAc,iDAG1B,uBACEC,UAAWD,EACXS,kBAAiBP,EACjBQ,QA1BiB,SAACC,GACpB,IAAMC,EAAc,CAAC,EACrBA,EAAYP,GAAMM,EAAEE,cAAcC,YAElCX,EAASS,EACX,EAsBIG,gCAAgC,GAE/BhB,EAGP,C,oYChDA,IAAMiB,EAAqBC,EAAAA,cAAoB,CAC7C,CAAC,EACD,WAAO,EACP,CAAC,EACD,WAAO,EACP,CAAC,EACD,WAAO,EACP,CAAC,EACD,WAAO,IAGHC,EAAsB,SAAH,GAAsB,IAAhBX,EAAQ,EAARA,SAC7B,GAAgDY,EAAAA,EAAAA,eAASC,GAAlDC,EAAgB,KAAEC,EAAmB,KAC5C,GAAgCH,EAAAA,EAAAA,eAASC,GAAlCG,EAAQ,KAAEC,EAAW,KAC5B,GAAsCL,EAAAA,EAAAA,eAASC,GAAxCK,EAAW,KAAEC,EAAc,KAClC,GAAgCP,EAAAA,EAAAA,WAAS,GAAlCQ,EAAQ,KAAEC,EAAW,KAE5B,OACE,gBAACZ,EAAmBa,SAAQ,CAC1BC,MAAO,CACLT,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,IAGDrB,EAGP,EAEMwB,EAAiB,WACrB,OAA+BC,EAAAA,EAAAA,MAAvBC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAElB,GASIC,EAAAA,EAAAA,YAAWnB,GARbK,EAAgB,KAChBC,EAAmB,KACnBC,EAAQ,KACRC,EAAW,KACXC,EAAW,KACXC,EAAc,KACdC,EAAQ,KACRC,EAAW,KAGPQ,EAAsB,mCAAG,WAAOC,GAA0B,mGAEtCC,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACkBC,EAAAA,EAAAA,GAAQ,iBACpBH,EACjB,MACAE,OACAnB,GACA,KAAD,EACqC,OANhCqB,EAAgB,OAMtBnB,EAAoBmB,GAAkB,kBAE/BA,GAAgB,kCAEvBC,QAAQC,MAAM,wBAAwB,EAAD,IAAO,0DAE/C,gBAf2B,sCAiBtBC,EAAc,mCAAG,WAAOP,GAA0B,mGAE9BC,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACUC,EAAAA,EAAAA,GAAQ,gCACGH,EAChC,MACAE,OACAnB,GACA,KAAD,EACqB,OANhByB,EAAQ,OAMdrB,EAAYqB,GAAU,kBACfA,GAAQ,kCAEfH,QAAQC,MAAM,uCAAuC,EAAD,IAAO,0DAE9D,gBAdmB,sCAgBdG,EAAiB,mCAAG,WAAOC,GAAgB,mGAEvBT,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EACtC,OADbM,EAAO,OACbX,GAAY,GAAO,UACKY,EAAAA,EAAAA,GACtB,0BAA4BO,EAC5B,MACAR,OACAnB,GACA,KAAD,EAGiB,OARd4B,EAAW,OAMftB,EAAesB,GAEfpB,GAAY,GAAM,kBACXoB,GAAW,kCAElBN,QAAQC,MAAM,yCAAyC,EAAD,IAAO,0DAEhE,gBAjBsB,sCAuBjBM,EAAa,mCAAG,WAAOF,GAAgB,mGAEnBT,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACYC,EAAAA,EAAAA,GAAQ,WAAY,OAAQD,EAAS,CAC5DQ,iBAAAA,IACC,KAAD,EAFc,OAAVG,EAAU,yBAITA,GAAU,kCAEjBR,QAAQC,MAAM,sCAAsC,EAAD,IAAO,0DAE7D,gBAXkB,sCAabQ,EAAgB,mCAAG,WAAOC,GAAO,mGAEbd,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACgBC,EAAAA,EAAAA,GAC3B,YAAcY,EAAQC,IACtB,SACAd,OACAnB,GACA,KAAD,EALmB,OAAdkC,EAAc,yBAObA,GAAc,kCAErBZ,QAAQC,MAAM,yCAAyC,EAAD,IAAO,0DAEhE,gBAdqB,sCAgBhBY,EAAkB,mCAAG,WAAOH,GAAO,mGAEfd,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACgBC,EAAAA,EAAAA,GAC3B,YAAcY,EAAQC,IAAM,UAC5B,OACAd,OACAnB,GACA,KAAD,EALmB,OAAdoC,EAAc,yBAObA,GAAc,kCAErBd,QAAQC,MAAM,2CAA2C,EAAD,IAAO,0DAElE,gBAduB,sCAgBlBc,EAAuB,mCAAG,WAAOL,GAAO,mGAEpBd,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACgBC,EAAAA,EAAAA,GAC3B,YAAcY,EAAQC,IAAM,UAC5B,SACAd,OACAnB,GACA,KAAD,EALmB,OAAdoC,EAAc,yBAObA,GAAc,kCAErBd,QAAQC,MAAM,gDAAgD,EAAD,IAAO,0DAEvE,gBAd4B,sCAgBvBe,EAAa,mCAAG,WAAOC,EAAMtD,GAAE,mGAGXiC,EAAAA,EAAAA,GAAgBJ,EAAUD,GAAU,KAAD,EAA5C,OAAPM,EAAO,iBACgBC,EAAAA,EAAAA,GAC3B,YAAcnC,EACd,QACAkC,EACAoB,GACA,KAAD,EALmB,OAAdH,EAAc,yBAQbA,GAAc,kCAErBd,QAAQC,MAAM,sCAAsC,EAAD,IAAO,0DAE7D,gBAhBkB,wCAkBnB,O,qWAAO,CAAP,GACK,CACDtB,iBAAAA,EACAe,uBAAAA,EACAb,SAAAA,EACAqB,eAAAA,EACAnB,YAAAA,EACAqB,kBAAAA,EACAG,cAAAA,EACAE,iBAAAA,EACAI,mBAAAA,EACAE,wBAAAA,EACAC,cAAAA,EACA/B,SAAAA,EACAC,YAAAA,GAGN,C,mFCtJA,IA5CiB,SAAH,GAAsC,IAAhCrB,EAAQ,EAARA,SAAUqD,EAAI,EAAJA,KAASC,GAAK,YACpCF,GAAOG,EAAAA,EAAAA,gBAAe,cAc5B,GACGF,GAAQA,EAAKG,cAAcC,SAAS,YACpCJ,GAAQA,EAAKG,cAAcC,SAAS,YAErC,OACE,mCAAGC,KAAML,GAAUC,GAChBtD,GAIP,IAAM2D,EAAeP,EAAKQ,QAAQC,MAAMC,MACtC,SAACC,GAAI,OAAKA,EAAKC,KAAKC,OAASZ,CAAI,IAEnC,OAAKM,EAUH,mCAAGD,KAAMC,EAAaK,KAAKE,WAAeZ,GACvCtD,GATD,2BACE,sBAAImE,MAAO,CAAEC,MAAO,QAAQ,YAAWf,EAAI,qBAC1CrD,EAUT,C,6DCvCA,IAXgB,WACd,OACE,uBAAKN,UAAU,WACb,uBAAKA,UAAU,qBACf,uBAAKA,UAAU,sBACb,gBAAC,IAAe,CAAC2E,KAAMC,EAAAA,IAAW5E,UAAU,mBAIpD,C,8yBCIA,IAoUA,EApUoB,SAAH,GAA0C,IAApCmD,EAAO,EAAPA,QAAS0B,EAAmB,EAAnBA,oBAC9B,GAA0C3D,EAAAA,EAAAA,WAAS,GAA5CjB,EAAa,KAAE6E,EAAgB,KACtC,GAAgC5D,EAAAA,EAAAA,UAASiC,EAAQ4B,UAA1CA,EAAQ,KAAEC,EAAW,KAC5B,GAAoD9D,EAAAA,EAAAA,UAAS,CAAC,GAAvD+D,EAAkB,KAAEC,EAAqB,KAEhD,GASIpD,EAAAA,EAAAA,KARFoB,EAAgB,EAAhBA,iBACAL,EAAiB,EAAjBA,kBACAS,EAAkB,EAAlBA,mBACAE,EAAuB,EAAvBA,wBACAC,EAAa,EAAbA,cACAnC,EAAQ,EAARA,SACAF,EAAgB,EAAhBA,iBACAI,EAAW,EAAXA,YAGI2D,EAAe,mCAAG,8FAEhBjC,EAAiBC,GAAS,KAAD,kBACzBN,EAAkBM,EAAQL,kBAAkB,KAAD,EACjD+B,OAAoB1D,GAAW,2CAChC,kBALoB,mCAOfiE,EAAoB,mCAAG,8FACE9B,EAAmBH,GAAS,KAAD,EAApC,WAEhBN,EAAkB,CAAD,+BACbA,EAAkBM,EAAQL,kBAAkB,KAAD,EACjD+B,OAAoB1D,GAAW,2CAElC,kBAPyB,mCASpBkE,EAAyB,mCAAG,8FACH7B,EAAwBL,GAAS,KAAD,EAAzC,WAEhBN,EAAkB,CAAD,+BACbA,EAAkBM,EAAQL,kBAAkB,KAAD,EACjD+B,OAAoB1D,GAAW,2CAElC,kBAP8B,mCAmBzBmE,EAAa,mCAAG,wFAEhBL,EAAmB,CAAD,gCACSxB,EAC3BwB,EACA9B,EAAQC,KACR,KAAD,EAID,GAPMmC,EAAc,OAKpBL,EAAsB,CAAC,GACvBJ,GAAiB,IAEbS,EAAe,CAAD,gCACV1C,EAAkBM,EAAQL,kBAAkB,KAAD,EACjD+B,OAAoB1D,GAAW,4CAGpC,kBAhBkB,mCAmBbqE,EAAe,SAACC,GAEpBP,GAAsB,SAACQ,GACrB,OAAO,EAAP,KAAYA,GAAkBD,EAChC,GACF,EAYA,OAAKtC,EAGH,uBACEnD,UACE,eAAiBC,EAAgB,gCAAkC,IAErE0F,IAAKxC,EAAQyC,QACbxF,GAAI+C,EAAQyC,SAEZ,uBAAK5F,UAAU,uBACb,4BAAO,aAAemD,EAAQyC,QAAU,OACxC,gBAAC,IAAe,CACd3F,cAAeA,EACfG,GAAG,OACHF,SAAUsF,EACVrF,aAAcgD,EAAQQ,KACtBtD,UAAQ,KAIZ,uBAAKL,UAAU,4BAGXsB,EAASuE,SACP,gBAAC,IAAe,CAAClB,KAAMmB,EAAAA,IAAYC,QAASZ,KAW7C7D,EAASuE,SACP1C,EAAQ6C,eAAejC,SAASzC,EAAS2E,WACZ,QAA5B7E,EAAiB8E,UACpBjG,EACC,gBAAC,IAAe,CAAC0E,KAAMwB,EAAAA,IAAQJ,QAtFV,WAC7BjB,GAAiB,EACnB,IAsFU,GAS0B,SAA5B1D,EAAiB8E,SACd1E,EAAY4C,MAAK,SAACjB,GAAO,OACxBA,EAAQ6C,eAAejC,SAASzC,EAAS2E,SAAS,KAEpD9C,EAAQ6C,eAAeI,OACrBhF,EAAiBiF,uBACjB,gBAAC,IAAe,CACd1B,KAAM2B,EAAAA,IACNP,QAASX,IASa,SAA5BhE,EAAiB8E,QACf/C,EAAQ6C,eAAejC,SAASzC,EAAS2E,WACvC,gBAAC,IAAe,CACdtB,KAAM4B,EAAAA,IACNR,QAASV,IAQfpF,GACE,gBAAC,IAAe,CAAC0E,KAAM6B,EAAAA,IAAQT,QAAST,IAQ1CrF,GACE,gBAAC,IAAe,CACd0E,KAAM8B,EAAAA,IACNV,QAtIuB,WACjCjB,GAAiB,GAEjBI,EAAsB,CAAC,EACzB,KAwII,uBAAKlF,UAAU,6BACYmB,IAAxBgC,EAAQuD,YACP,gCACE,uBAAK1G,UAAU,+BAA6B,eAC5C,gBAAC,IAAe,CACdA,UAAU,oCACVC,cAAeA,EACfG,GAAG,cACHD,aAAcgD,EAAQuD,YACtBxG,SAAUsF,KAId,IAIJ,uBAAKxF,UAAU,6BACgBmB,IAA5BgC,EAAQwD,gBACP,gCACE,uBAAK3G,UAAU,+BAA6B,yBAG5C,gBAAC,IAAe,CACdA,UAAU,oCACVC,cAAeA,EACfG,GAAG,kBACHD,aAAcgD,EAAQwD,gBACtBzG,SAAUsF,GAEV,gBAAC,IAAY,CAACoB,IAAKzD,EAAQwD,oBAI/B,IAIJ,uBAAK3G,UAAU,6BACsBmB,IAAlCgC,EAAQ0D,sBACP,gCACE,uBAAK7G,UAAU,+BAA6B,eAC5C,gBAAC,IAAe,CACdA,UAAU,oCACVC,cAAeA,EACfG,GAAG,wBACHD,aAAcgD,EAAQ0D,sBACtB3G,SAAUsF,GAEV,qBAAGxB,KAAMb,EAAQ0D,sBAAuBC,OAAO,UAC5C3D,EAAQ0D,yBAKf,IAIJ,uBAAK7G,UAAU,6BACamB,IAAzBgC,EAAQ4D,aACP,gCACE,uBAAK/G,UAAU,+BAA6B,iBAC5C,gBAAC,IAAe,CACdA,UAAU,oCACVC,cAAeA,EACfG,GAAG,eACHD,aAAcgD,EAAQ4D,aACtB7G,SAAUsF,GAEV,qBAAGxB,KAAMb,EAAQ4D,aAAcD,OAAO,UACnC3D,EAAQ4D,gBAKf,IAIJ,uBAAK/G,UAAU,6BACYmB,IAAxBgC,EAAQ6D,YACP,gCACE,uBAAKhH,UAAU,+BAA6B,gBAC5C,gBAAC,IAAe,CACdA,UAAU,oCACVC,cAAeA,EACfG,GAAG,cACHD,aAAcgD,EAAQ6D,YACtB9G,SAAUsF,GAEV,qBAAGxB,KAAMb,EAAQ6D,YAAaF,OAAO,UAClC3D,EAAQ6D,eAKf,IAKJ,uBAAKhH,UAAU,6BACemB,IAA3BgC,EAAQ6C,gBACT7C,EAAQ6C,eAAeI,OAAS,EAC9B,gCACE,uBAAKpG,UAAU,+BAA6B,qBAC5C,uBAAKA,UAAU,qCACZmD,EAAQ6C,eACNiB,KAAI,SAACC,GAAM,OAAKC,EAAAA,EAAAA,GAAkBD,EAAO,IACzCE,KAAK,QAIZ,IAIJ,uBAAKpH,UAAU,6BACSmB,IAArBgC,EAAQ4B,SACP,gCACE,uBAAK/E,UAAU,+BAA6B,YAC5C,uBAAKA,UAAU,qCACb,yBACEqH,KAAK,WACLC,QAASvC,EACTwC,UAAUtH,EACV8F,QA3OM,SAACrF,GACnBsE,GAAaD,GACbG,EAAsB,EAAD,KAChBD,GACA,CAAEF,UAAWA,IAEpB,MA0OQ,KAtOa,IA2OvB,EChUA,EAbqB,SAAH,GAA2C,IAArCyC,EAAQ,EAARA,SAAW3C,EAAmB,EAAnBA,oBAEjC,OAAK2C,GAAYA,EAASpB,QAAU,EAAU,KAG5C,gCACGoB,EAASP,KAAI,SAAC9D,GAAO,OACpB,gBAAC,EAAW,CAAOA,QAAAA,EAAS0B,oBAAAA,GAAyB,IAI7D,E,sBC4GA,EAtH0B,SAAH,GAAyD,IAAnDzC,EAA0B,EAA1BA,2BAA4BqF,EAAe,EAAfA,gBAEvD,GASI3F,EAAAA,EAAAA,KARFV,EAAgB,EAAhBA,iBACAe,EAAsB,EAAtBA,uBACAb,EAAQ,EAARA,SACAqB,EAAc,EAAdA,eACAjB,EAAQ,EAARA,SACAF,EAAW,EAAXA,YACAwB,EAAa,EAAbA,cACAH,EAAiB,EAAjBA,kBAGF,GAAgD3B,EAAAA,EAAAA,eAASC,GAAlDuG,EAAgB,KAAE7C,EAAmB,KAC5C,GAA0B3D,EAAAA,EAAAA,UAAS,IAArByG,GAAF,KAAU,MA8BhBC,EAAY,mCAAG,8FAEb5E,EAAc5B,EAAiBgC,KAAK,KAAD,kBACTP,EAAkBzB,EAAiBgC,KAAK,KAAD,EAAhD,OACvByB,OAAoB1D,GAAW,2CAChC,kBALiB,oCAOlB0G,EAAAA,EAAAA,YAAU,WAERC,GACF,GAAG,IAEH,IAAMA,EAAO,mCAAG,6GAGQ3F,EAAuBC,GAA4B,KAAD,EAA3D,OAAL2F,EAAK,gBAEQpF,EAAeP,GAA4B,KAAD,EAAnD,uBAESS,EAAkBkF,EAAM3E,KAAK,KAAD,EAArC,yDAEVX,QAAQC,MAAM,gBAAgB,EAAD,IAAS,0DAEzC,kBAXY,mCAab,OACE,iCACIhB,GAAY,gBAAC,IAAO,WACAP,IAArBC,EACC,GAGA,uBAAKpB,UAAU,uBACb,sBAAIA,UAAU,IAAE,0BAAyBoB,aAAgB,EAAhBA,EAAkBgC,KAE1DqE,GACC,gBAAC,IAAQ,CAAC9D,KAAM8D,GAAgB,kCAIlC,uBAAKzH,UAAU,SACb,yBACEqH,KAAK,OACL,aAAW,SACXW,YAAY,0BACZ9H,SAvEc,SAACQ,GAIzB,IAAMuH,EAAYvH,EAAEoG,OAAOjF,MAC3B8F,EAASjH,EAAEoG,OAAOjF,OAGlB,IAAMqG,EAAe1G,EAAY2G,QAAO,SAACC,GAEvC,IAAQxC,EAA+BwC,EAA/BxC,QAASjC,EAAsByE,EAAtBzE,KAAM+C,EAAgB0B,EAAhB1B,YACvB,OAIE/C,EAAKG,cAAcC,SAASkE,EAAUnE,gBACtC4C,EAAY5C,cAAcC,SAASkE,EAAUnE,gBAC5CmE,EAAU7B,OAAS,GAAKiC,SAASJ,KAAerC,CAErD,IAEIsC,GAAgBA,EAAa9B,OAAS,EACxCvB,EAAoBqD,GACjBrD,OAAoB1D,EAC3B,EAgDYnB,UAAU,kBAEX0H,GAAoBA,EAAiBtB,OAAS,EAC7C,gBAAC,EAAY,CACXoB,SAAUE,EACV7C,oBAAqBA,IAGvB,gBAAC,EAAY,CACX2C,SAAUhG,EACVqD,oBAAqBA,UAMb1D,IAAbG,GAA2BA,EAASuE,QAGnC,0BAAQ7F,UAAU,gBAAgB+F,QAAS6B,GAAa,kBAFxD,IAUZ,EChFA,GAD6BU,EAAAA,EAAAA,IAhCT,WAClB,IAAM5E,GAAOG,EAAAA,EAAAA,gBAAe,aAa5B,EAGIH,aAAI,EAAJA,EAAM6E,KAAKC,aAFsBpG,EAA0B,EAA7DqG,kCACAhB,EAAe,EAAfA,gBAKF,OACE,gBAAC,IAAmB,KAClB,gBAAC,IAAU,KACT,gBAAC,EAAiB,CACVrF,2BAAAA,EAA4BqF,gBAAAA,KAK5C,G,2FCvCe,SAAelF,EAAQ,EAAD,sCAuDpC,wCAvDc,WAAuBmG,EAAUC,EAAgBC,EAAOlF,GAAI,mFAuBxB,YAvBG,IAANiF,IAAAA,EAAS,OACnDE,EAAU,IAAIC,SACdC,EAAU,CAAC,GACPJ,OAASA,EAIbC,IACII,EAAM,UAAaJ,EACzBC,EAAQI,OAAO,gBAAiBD,IAG9BtF,IACFqF,EAAQG,KAAOC,KAAKC,UAAU1F,IAIL,SAAzBiF,EAAO7E,eACkB,UAAzB6E,EAAO7E,eACkB,QAAzB6E,EAAO7E,eAEP+E,EAAQI,OAAO,eAAgB,oBACjCF,EAAQF,QAAUA,EACZQ,EAAMC,oDAA6BZ,EAAS,EAAD,iBASxBa,MAAMF,EAAKN,GAAS,KAAD,GAA5B,IAARS,EAAQ,QAEAC,GAAG,CAAD,gBAME,OALZC,EACF,iBACAF,EAAStD,OACT,MACAsD,EAASG,WACT,eAAe,EAAD,QACWH,EAASI,OAAO,KAAD,GAMzC,MANKC,EAAY,OAClBH,GAAoBG,EACpBpH,QAAQC,MAAM,gBAAiBgH,GAE3BA,EAAiBI,OAAO,WAGtB,IAAIC,MAAML,GAAkB,KAAD,oBAEtBF,EAASQ,OAAO,KAAD,4IAK/B,sB,oGCzDkE,SAEpD3H,EAAgB,EAAD,+CAkB7B,OAlB6B,oBAA9B,WAA+BJ,EAAUD,GAAQ,gFAC3CC,EAASmE,OAAS,GAAC,iBAIpB,OAHK6D,EAAU,CACdC,OAAQ,CAAC,UACTC,QAASlI,EAAS,IAClB,EAAD,gBAGwBD,EAASoI,mBAAmBH,GAAS,KAAD,EAA7C,OAART,EAAQ,yBACPA,EAASlH,SAAO,qCAGnB,gBAAiB+H,EAAAA,IAA4B,kCACvBrI,EAASsI,qBAAqBL,GAAS,KAAD,GAA/C,OAATM,EAAS,yBACRA,EAAUjI,SAAO,0DAI/B,sB,wDCpBD,IAAM6E,EAAoB,SAACqD,GACzB,IAAIC,EAAQD,EAAME,UAAU,EAAGF,EAAMG,QAAQ,MACzCC,EAAYH,EAAMC,UAAU,EAAGD,EAAME,QAAQ,MAC7CE,EAAWJ,EAAMC,UAAUD,EAAME,QAAQ,KAAO,GAQpD,OAPAC,EAAYA,EAAUE,OAAO,GAAGC,cAAgBH,EAAUI,MAAM,IAChEH,EAAWA,EAASC,OAAO,GAAGC,cAAgBF,EAASG,MAAM,IAEhDL,QAAQ,MAAQ,IAE3BE,GADAA,EAAWA,EAASH,UAAUG,EAASF,QAAQ,KAAO,IAClCG,OAAO,GAAGC,cAAgBF,EAASG,MAAM,IAExDJ,EAAY,IAAMC,CAC3B,C","sources":["webpack://myjscourse/./src/components/content-editable/content-editable.js","webpack://myjscourse/./src/components/context/projects/project-data-context.js","webpack://myjscourse/./src/components/file/link-file.js","webpack://myjscourse/./src/components/spinner/spinner.js","webpack://myjscourse/./src/components/projects/project-card.js","webpack://myjscourse/./src/components/projects/projects-view.js","webpack://myjscourse/./src/components/projects/project-management.js","webpack://myjscourse/./src/pages/project-page.js","webpack://myjscourse/./src/utils/api/fetch.js","webpack://myjscourse/./src/utils/auths/use-id-token.js","webpack://myjscourse/./src/utils/string/string.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport he from 'he';\r\n\r\n/**\r\n * Make a div editable with text (could also be some HTML if needed).\r\n * @param {startContent} String to be used when the content is being updated\r\n * @param {children} React elements to be used when the content is not being updated\r\n * @returns\r\n */\r\n\r\nconst ContentEditable = ({\r\n  className,\r\n  isBeingEdited,\r\n  onChange,\r\n  startContent,\r\n  id,\r\n  isInline,\r\n  children,\r\n}) => {\r\n  //const [content, setContent] = useState(startContent);\r\n\r\n  const handleChange = (e) => {\r\n    const propUpdated = {};\r\n    propUpdated[id] = e.currentTarget.textContent;\r\n    // set state at parent level\r\n    onChange(propUpdated);\r\n  };\r\n\r\n  let currentContent;\r\n  if (isBeingEdited)\r\n    currentContent = startContent\r\n      ? he.decode(startContent)\r\n      : ''; \r\n  else if (children) currentContent = children;\r\n  else if (startContent)\r\n    currentContent = startContent ? he.decode(startContent) : '';\r\n\r\n  let allClasses;\r\n  allClasses = className ? className : '';\r\n  if (isBeingEdited)\r\n    allClasses += ' index__card__content__description--is-being-edited';\r\n  if (isInline) allClasses += ' index__card__content__description--is-inline';\r\n\r\n  return (\r\n    <div\r\n      className={allClasses}\r\n      contentEditable={isBeingEdited ? true : false}\r\n      onInput={handleChange}\r\n      suppressContentEditableWarning={true}\r\n    >\r\n      {currentContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentEditable;\r\n","import React, { useContext, useState } from 'react';\r\nimport callAPI from '../../../utils/api/fetch';\r\nimport { useMsal } from '@azure/msal-react';\r\nimport { getAsyncIdToken } from '../../../utils/auths/use-id-token';\r\n\r\nconst ProjectDataContext = React.createContext([\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n  {},\r\n  () => {},\r\n]);\r\n\r\nconst ProjectDataProvider = ({ children }) => {\r\n  const [projectGroupData, setProjectGroupData] = useState(undefined);\r\n  const [userData, setUserData] = useState(undefined);\r\n  const [projectData, setProjectData] = useState(undefined);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  return (\r\n    <ProjectDataContext.Provider\r\n      value={[\r\n        projectGroupData,\r\n        setProjectGroupData,\r\n        userData,\r\n        setUserData,\r\n        projectData,\r\n        setProjectData,\r\n        isLoaded,\r\n        setIsLoaded,\r\n      ]}\r\n    >\r\n      {children}\r\n    </ProjectDataContext.Provider>\r\n  );\r\n};\r\n\r\nconst useProjectData = () => {\r\n  const { instance, accounts } = useMsal();\r\n\r\n  const [\r\n    projectGroupData,\r\n    setProjectGroupData,\r\n    userData,\r\n    setUserData,\r\n    projectData,\r\n    setProjectData,\r\n    isLoaded,\r\n    setIsLoaded,\r\n  ] = useContext(ProjectDataContext);\r\n\r\n  const updateProjectGroupData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempProjectGroup = await callAPI(\r\n        `projectgroups/${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectGroupData(tempProjectGroup);\r\n      console.log('STATE NOW ????', tempProjectGroup);\r\n      return tempProjectGroup;\r\n    } catch (err) {\r\n      console.error('useProjectData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateUserData = async (associatedProjectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const tempUser = await callAPI(\r\n        `users/role/?projectgroupname=${associatedProjectGroupName}`,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setUserData(tempUser);\r\n      return tempUser;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateUserData:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProjectData = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      setIsLoaded(false);\r\n      let tempProject = await callAPI(\r\n        'projects/projectgroups/' + projectGroupName,\r\n        'get',\r\n        idToken,\r\n        undefined\r\n      );\r\n      setProjectData(tempProject);\r\n      console.log('project array updated', tempProject);\r\n      setIsLoaded(true);\r\n      return tempProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProjectDataerror:', err);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add one project to an existing projectGroupName !\r\n   * @param {*} projectGroupName\r\n   */\r\n  const addOneProject = async (projectGroupName) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const newProject = await callAPI('projects', 'post', idToken, {\r\n        projectGroupName,\r\n      });\r\n      //return await updateProjectData(projectGroupName);\r\n      return newProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:addOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteOneProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const deletedProject = await callAPI(\r\n        'projects/' + project._id,\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n      //return await updateProjectData(projectGroupName);\r\n      return deletedProject;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteOneProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const addMemberToProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'POST',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:addMemberToProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const deleteMemberFromProject = async (project) => {\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + project._id + '/member',\r\n        'DELETE',\r\n        idToken,\r\n        undefined\r\n      );\r\n\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:deleteMemberFromProject:error:', err);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (data, id) => {\r\n    console.log('project to be updated:', data);\r\n    try {\r\n      const idToken = await getAsyncIdToken(accounts, instance);\r\n      const projectUpdated = await callAPI(\r\n        'projects/' + id,\r\n        'PATCH',\r\n        idToken,\r\n        data\r\n      );\r\n\r\n      console.log('project updated:', projectUpdated);\r\n      return projectUpdated;\r\n    } catch (err) {\r\n      console.error('useProjectData:updateProject:error:', err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...{\r\n      projectGroupData,\r\n      updateProjectGroupData,\r\n      userData,\r\n      updateUserData,\r\n      projectData,\r\n      updateProjectData,\r\n      addOneProject,\r\n      deleteOneProject,\r\n      addMemberToProject,\r\n      deleteMemberFromProject,\r\n      updateProject,\r\n      isLoaded,\r\n      setIsLoaded,\r\n    },\r\n  };\r\n};\r\n\r\nexport { ProjectDataProvider, useProjectData };\r\n","import React from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\r\n\r\n/**\r\n * Based on a name of a file (WARNING : there cannot be duplicates), provide a link to this file\r\n *\r\n * It is also possible to provide as name the source of an external file that shall contain\r\n * http:// or https:// to get an external link.\r\n * @param {*} param0\r\n * @returns\r\n */\r\nconst LinkFile = ({ children, name, ...other }) => {\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      allFile {\r\n        edges {\r\n          node {\r\n            relativePath\r\n            publicURL\r\n            base\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  if (\r\n    (name && name.toLowerCase().includes(\"http://\")) ||\r\n    (name && name.toLowerCase().includes(\"https://\"))\r\n  )\r\n    return (\r\n      <a href={name} {...other}>\r\n        {children}\r\n      </a>\r\n    );\r\n\r\n  const requiredFile = data.allFile.edges.find(\r\n    (file) => file.node.base === name\r\n  );\r\n  if (!requiredFile) {\r\n    return (\r\n      <div>\r\n        <h3 style={{ color: \"red\" }}>The file {name} does not exist !</h3>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <a href={requiredFile.node.publicURL} {...other}>\r\n      {children}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default LinkFile;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { fas, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"spinner__overlay\"></div>\r\n      <div className=\"spinner__animation\">\r\n        <FontAwesomeIcon icon={faSpinner} className=\"fa-3x fa-spin\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport he from \"he\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEdit,\r\n  faTrashAlt,\r\n  faUserPlus,\r\n  faUserTimes,\r\n  faSave,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getNamesFromEmail } from \"../../utils/string/string\";\r\nimport { useProjectData } from \"../context/projects/project-data-context\";\r\nimport ContentEditable from \"../content-editable/content-editable.js\";\r\n\r\nconst ProjectCard = ({ project, setFilteredContents }) => {\r\n  const [isBeingEdited, setIsBeingEdited] = useState(false);\r\n  const [isPublic, setIsPublic] = useState(project.isPublic);\r\n  const [projectUpdateState, setProjectUpdateState] = useState({});\r\n  // Get state management functions from the provider\r\n  const {\r\n    deleteOneProject,\r\n    updateProjectData,\r\n    addMemberToProject,\r\n    deleteMemberFromProject,\r\n    updateProject,\r\n    userData,\r\n    projectGroupData,\r\n    projectData,\r\n  } = useProjectData();\r\n  // Deal with events\r\n  const onProjectDelete = async () => {\r\n    //console.log(\"projectId: endpoint:\", \"DELETE /api/projects/\" + projectId);\r\n    await deleteOneProject(project);\r\n    await updateProjectData(project.projectGroupName);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  const onAddMemberToProject = async () => {\r\n    const updatedProject = await addMemberToProject(project);\r\n    console.log(\"onAddMemberToProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onDeleteMemberFromProject = async () => {\r\n    const updatedProject = await deleteMemberFromProject(project);\r\n    console.log(\"onDeleteMemberFromProject:\", updatedProject);\r\n    if (updateProjectData) {\r\n      await updateProjectData(project.projectGroupName);\r\n      setFilteredContents(undefined);\r\n    }\r\n  };\r\n\r\n  const onProjectUpdateRequest = () => {\r\n    setIsBeingEdited(true);\r\n  };\r\n\r\n  const onQuitProjectUpdateRequest = () => {\r\n    setIsBeingEdited(false);\r\n    // clear the update state\r\n    setProjectUpdateState({});\r\n  };\r\n\r\n  const onProjectSave = async () => {\r\n    // save the updated state via the API\r\n    if (projectUpdateState) {\r\n      const updatedProject = await updateProject(\r\n        projectUpdateState,\r\n        project._id\r\n      );\r\n      // clear the project update state\r\n      setProjectUpdateState({});\r\n      setIsBeingEdited(false);\r\n      // re-render all projects\r\n      if (updatedProject) {\r\n        await updateProjectData(project.projectGroupName);\r\n        setFilteredContents(undefined);\r\n      }\r\n    }\r\n  };\r\n\r\n  // deal with modification of content\r\n  const handleChange = (propChanged) => {\r\n    // update the projectState\r\n    setProjectUpdateState((previousState) => {\r\n      return { ...previousState, ...propChanged };\r\n    });\r\n  };\r\n\r\n  const onSetPublic = (e) => {\r\n    setIsPublic(!isPublic);\r\n    setProjectUpdateState({\r\n      ...projectUpdateState,\r\n      ...{ isPublic: !isPublic },\r\n    });\r\n  };\r\n\r\n  console.log(\"projStateUpdated:\", projectUpdateState);\r\n\r\n  if (!project) return null;\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        \"index__card\" + (isBeingEdited ? \" index__card--is-being-edited\" : \"\")\r\n      }\r\n      key={project.shortId}\r\n      id={project.shortId}\r\n    >\r\n      <div className=\"index__card__header\">\r\n        <span>{\"Projet N° \" + project.shortId + \" : \"}</span>\r\n        <ContentEditable\r\n          isBeingEdited={isBeingEdited}\r\n          id=\"name\"\r\n          onChange={handleChange}\r\n          startContent={project.name}\r\n          isInline\r\n        />\r\n      </div>\r\n\r\n      <div className=\"index__card__description\">\r\n        {\r\n          /* DELETE icon only if user isAdmin (admin or manager) */\r\n          userData.isAdmin && (\r\n            <FontAwesomeIcon icon={faTrashAlt} onClick={onProjectDelete} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /* UPDATE PROJECT : visible only if \r\n          (user is Admin (admin or manager) OR\r\n          user is a member of this project AND \r\n          project group status is not \"end\" ) AND\r\n          project is not being edited\r\n          */\r\n          (userData.isAdmin ||\r\n            (project.projectMembers.includes(userData.userName) &&\r\n              projectGroupData.status !== \"end\")) &&\r\n          !isBeingEdited ? (\r\n            <FontAwesomeIcon icon={faEdit} onClick={onProjectUpdateRequest} />\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n\r\n        {\r\n          /* ADD MEMBER TO PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName has not already joined a project AND\r\n        number of members is < maximum number */\r\n          projectGroupData.status === \"init\" &&\r\n            !projectData.find((project) =>\r\n              project.projectMembers.includes(userData.userName)\r\n            ) &&\r\n            project.projectMembers.length <\r\n              projectGroupData.maximumProjectMembers && (\r\n              <FontAwesomeIcon\r\n                icon={faUserPlus}\r\n                onClick={onAddMemberToProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*REMOVE MEMBER FROM PROJECT : Visible only if :\r\n        project group status is \"init\" AND\r\n        userName is already a member of this project\r\n        */\r\n          projectGroupData.status === \"init\" &&\r\n            project.projectMembers.includes(userData.userName) && (\r\n              <FontAwesomeIcon\r\n                icon={faUserTimes}\r\n                onClick={onDeleteMemberFromProject}\r\n              />\r\n            )\r\n        }\r\n        {\r\n          /*SAVE PROJECT : Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon icon={faSave} onClick={onProjectSave} />\r\n          )\r\n        }\r\n\r\n        {\r\n          /*QUIT PROJECT UPDATE: Visible only if :\r\n        project is being edited       \r\n        */\r\n          isBeingEdited && (\r\n            <FontAwesomeIcon\r\n              icon={faTimes}\r\n              onClick={onQuitProjectUpdateRequest}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.description !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Description</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"description\"\r\n              startContent={project.description}\r\n              onChange={handleChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.presentationUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">\r\n              Vidéo de présentation\r\n            </div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"presentationUrl\"\r\n              startContent={project.presentationUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <YoutubeImage src={project.presentationUrl} />\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendProductionUrl !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">URL du site</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendProductionUrl\"\r\n              startContent={project.frontendProductionUrl}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendProductionUrl} target=\"_blank\">\r\n                {project.frontendProductionUrl}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.frontendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo frontend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"frontendRepo\"\r\n              startContent={project.frontendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.frontendRepo} target=\"_blank\">\r\n                {project.frontendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.backendRepo !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Repo backend</div>\r\n            <ContentEditable\r\n              className=\"index__card__content__description\"\r\n              isBeingEdited={isBeingEdited}\r\n              id=\"backendRepo\"\r\n              startContent={project.backendRepo}\r\n              onChange={handleChange}\r\n            >\r\n              <a href={project.backendRepo} target=\"_blank\">\r\n                {project.backendRepo}\r\n              </a>\r\n            </ContentEditable>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      {/* Deal with project members */}\r\n      <div className=\"index__card__content\">\r\n        {project.projectMembers !== undefined &&\r\n        project.projectMembers.length > 0 ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Membres du projet</div>\r\n            <div className=\"index__card__content__description\">\r\n              {project.projectMembers\r\n                .map((member) => getNamesFromEmail(member))\r\n                .join(\", \")}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"index__card__content\">\r\n        {project.isPublic !== undefined ? (\r\n          <>\r\n            <div className=\"index__card__content__title\">Public ?</div>\r\n            <div className=\"index__card__content__description\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={isPublic}\r\n                disabled={isBeingEdited ? false : true}\r\n                onClick={onSetPublic}\r\n              />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from \"react\";\r\nimport { Link, useStaticQuery } from \"gatsby\";\r\nimport YoutubeImage from \"../image/youtube-image.js\";\r\nimport ProjectCard from \"./project-card.js\";\r\nimport he from \"he\";\r\n\r\nconst ProjectsView = ({ projects , setFilteredContents}) => {\r\n  console.log(\"PROJECTSVIEW\", projects);\r\n  if (!projects || projects.length <= 0) return null;\r\n\r\n  return (\r\n    <>\r\n      {projects.map((project) => (\r\n        <ProjectCard {...{ project, setFilteredContents }} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProjectsView;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ProjectsView from './projects-view';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nimport { useProjectData } from '../context/projects/project-data-context';\r\nimport LinkFile from '../file/link-file';\r\n\r\nconst ProjectManagement = ({ associatedProjectGroupName, projectDocument }) => {\r\n  // Get state from the provider\r\n  const {\r\n    projectGroupData,\r\n    updateProjectGroupData,\r\n    userData,\r\n    updateUserData,\r\n    isLoaded,\r\n    projectData,\r\n    addOneProject,\r\n    updateProjectData,\r\n  } = useProjectData();\r\n\r\n  const [filteredContents, setFilteredContents] = useState(undefined);\r\n  const [query, setQuery] = useState('');\r\n\r\n  console.log(\"projectDocument : \", projectDocument);\r\n\r\n  const handleInputChange = (e) => {\r\n    // Get project data from Context\r\n    //const { projectData } = useProjectData();\r\n\r\n    const inputText = e.target.value;\r\n    setQuery(e.target.value);\r\n\r\n    console.log('handleInputChange::ProjectData', projectData);\r\n    const filteredData = projectData.filter((content) => {\r\n      // destructure data from post frontmatter\r\n      const { shortId, name, description } = content;\r\n      return (\r\n        // standardize data with .toLowerCase()\r\n        // return true if the subject, skills...\r\n        // contains the query string\r\n        name.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        description.toLowerCase().includes(inputText.toLowerCase()) ||\r\n        (inputText.length > 0 && parseInt(inputText) === shortId)\r\n      );\r\n    });\r\n\r\n    if (filteredData && filteredData.length > 0)\r\n      setFilteredContents(filteredData);\r\n    else setFilteredContents(undefined);\r\n  };\r\n\r\n  const onProjectAdd = async () => {\r\n    console.log('add and', projectGroupData._id);\r\n    await addOneProject(projectGroupData._id);\r\n    const newListOfProjects = await updateProjectData(projectGroupData._id);\r\n    setFilteredContents(undefined);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // get data from APIs\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Deal with project group data\r\n      const group = await updateProjectGroupData(associatedProjectGroupName);\r\n      // Deal with user role data {role:..., isAdmin:...}\r\n      const user = await updateUserData(associatedProjectGroupName);\r\n      // Deal with project data\r\n      const temp = await updateProjectData(group._id);\r\n    } catch (error) {\r\n      console.error('getData:error', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!isLoaded && <Spinner />}\r\n      {projectGroupData === undefined ? (\r\n        ''\r\n      ) : (\r\n        // deal with project view\r\n        <div className=\"pl-3 pt-3 pb-3 pr-3\">\r\n          <h3 className=\"\">Projets des groupes de {projectGroupData?._id}</h3>\r\n          {/* Deal with potential project document to print*/}\r\n          {projectDocument && (\r\n            <LinkFile name={projectDocument}>\r\n              Consignes & template du projet\r\n            </LinkFile>\r\n          )}\r\n          <div className=\"index\">\r\n            <input\r\n              type=\"text\"\r\n              aria-label=\"Search\"\r\n              placeholder=\"Filtrez les contenus...\"\r\n              onChange={handleInputChange}\r\n              className=\"index__search\"\r\n            />\r\n            {filteredContents && filteredContents.length > 0 ? (\r\n              <ProjectsView\r\n                projects={filteredContents}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            ) : (\r\n              <ProjectsView\r\n                projects={projectData}\r\n                setFilteredContents={setFilteredContents}\r\n              ></ProjectsView>\r\n            )}\r\n          </div>\r\n\r\n          {/* // deal with add a project button */}\r\n          {userData === undefined || !userData.isAdmin ? (\r\n            ''\r\n          ) : (\r\n            <button className=\"index__button\" onClick={onProjectAdd}>\r\n              Ajouter projet\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ProjectManagement;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { useStaticQuery } from 'gatsby';\r\n\r\nimport MainLayout from '../components/main-layout';\r\n\r\nimport { withAuthentication } from '../components/hoc/hoc';\r\nimport { ProjectDataProvider } from '../components/context/projects/project-data-context';\r\n\r\nimport ProjectManagement from '../components/projects/project-management';\r\n\r\nconst ProjectPage = () => {\r\n  const data = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            defaultAssociatedProjectGroupName,\r\n            projectDocument\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const {\r\n    defaultAssociatedProjectGroupName: associatedProjectGroupName,\r\n    projectDocument,\r\n  } = data?.site.siteMetadata;\r\n\r\n  console.log(\"document:\", projectDocument);\r\n\r\n  return (\r\n    <ProjectDataProvider>\r\n      <MainLayout>\r\n        <ProjectManagement\r\n          {...{ associatedProjectGroupName, projectDocument }}\r\n        />\r\n      </MainLayout>\r\n    </ProjectDataProvider>\r\n  );\r\n};\r\n\r\nconst ProjectPageProtected = withAuthentication(ProjectPage);\r\nexport default ProjectPageProtected;\r\n","// Helper function to call our API\r\n// using authorization bearer token scheme\r\nexport default async function callAPI(endpoint, method = \"get\", token, data) {\r\n  let headers = new Headers();\r\n  let options = {};\r\n  options.method = method;\r\n\r\n  console.log(\"token :\", token);\r\n\r\n  if (token) {\r\n    const bearer = `Bearer ${token}`;\r\n    headers.append(\"Authorization\", bearer);\r\n  }\r\n\r\n  if (data) {\r\n    options.body = JSON.stringify(data);\r\n  }\r\n\r\n  if (\r\n    method.toLowerCase() === \"post\" ||\r\n    method.toLowerCase() === \"patch\" ||\r\n    method.toLowerCase() === \"put\"\r\n  )\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n  options.headers = headers;  \r\n  const url = process.env.GATSBY_API_URL + endpoint;\r\n  console.log(\r\n    \"request made to API at: \" + new Date().toString(),\r\n    \"URL:\",\r\n    url,\r\n    \"Options:\",\r\n    options\r\n  );\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (!response.ok) {\r\n      let fullErrorMessage =\r\n        \" Error code : \" +\r\n        response.status +\r\n        \" : \" +\r\n        response.statusText +\r\n        \"/nMessage : \";\r\n      const textResponse = await response.text();\r\n      fullErrorMessage += textResponse;\r\n      console.error(\"fetch() error\", fullErrorMessage);\r\n      // deal with token expiration\r\n      if (fullErrorMessage.search(\"expired\") > -1) {\r\n        console.log(\"token expired\");\r\n      }\r\n      throw new Error(fullErrorMessage);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.log(\"error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n","import { InteractionRequiredAuthError } from \"@azure/msal-browser\";\r\n\r\nasync function getAsyncIdToken(accounts, instance) {\r\n  if (accounts.length > 0) {\r\n    const request = {\r\n      scopes: [\"openid\"],\r\n      account: accounts[0],\r\n    };\r\n\r\n    try {\r\n      const response = await instance.acquireTokenSilent(request);\r\n      return response.idToken;\r\n    } catch (error) {\r\n      // acquireTokenSilent can fail for a number of reasons, fallback to interaction\r\n      if (error instanceof InteractionRequiredAuthError) {\r\n        const response2 = await instance.acquireTokenRedirect(request);\r\n        return response2.idToken;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { getAsyncIdToken };\r\n","const getNamesFromEmail = (email) => {\r\n  let names = email.substring(0, email.indexOf(\"@\"));\r\n  let firstname = names.substring(0, names.indexOf(\".\"));\r\n  let lastname = names.substring(names.indexOf(\".\") + 1);\r\n  firstname = firstname.charAt(0).toUpperCase() + firstname.slice(1);\r\n  lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  // deal with cases where Extra info is added to the name, when there is a second dot\r\n  if (lastname.indexOf(\".\") >= 0) {\r\n    lastname = lastname.substring(lastname.indexOf(\".\") + 1);\r\n    lastname = lastname.charAt(0).toUpperCase() + lastname.slice(1);\r\n  }\r\n  return firstname + \" \" + lastname;\r\n};\r\n\r\nexport { getNamesFromEmail };\r\n"],"names":["currentContent","allClasses","className","isBeingEdited","onChange","startContent","id","isInline","children","he","contentEditable","onInput","e","propUpdated","currentTarget","textContent","suppressContentEditableWarning","ProjectDataContext","React","ProjectDataProvider","useState","undefined","projectGroupData","setProjectGroupData","userData","setUserData","projectData","setProjectData","isLoaded","setIsLoaded","Provider","value","useProjectData","useMsal","instance","accounts","useContext","updateProjectGroupData","associatedProjectGroupName","getAsyncIdToken","idToken","callAPI","tempProjectGroup","console","error","updateUserData","tempUser","updateProjectData","projectGroupName","tempProject","addOneProject","newProject","deleteOneProject","project","_id","deletedProject","addMemberToProject","projectUpdated","deleteMemberFromProject","updateProject","data","name","other","useStaticQuery","toLowerCase","includes","href","requiredFile","allFile","edges","find","file","node","base","publicURL","style","color","icon","faSpinner","setFilteredContents","setIsBeingEdited","isPublic","setIsPublic","projectUpdateState","setProjectUpdateState","onProjectDelete","onAddMemberToProject","onDeleteMemberFromProject","onProjectSave","updatedProject","handleChange","propChanged","previousState","key","shortId","isAdmin","faTrashAlt","onClick","projectMembers","userName","status","faEdit","length","maximumProjectMembers","faUserPlus","faUserTimes","faSave","faTimes","description","presentationUrl","src","frontendProductionUrl","target","frontendRepo","backendRepo","map","member","getNamesFromEmail","join","type","checked","disabled","projects","projectDocument","filteredContents","setQuery","onProjectAdd","useEffect","getData","group","placeholder","inputText","filteredData","filter","content","parseInt","withAuthentication","site","siteMetadata","defaultAssociatedProjectGroupName","endpoint","method","token","headers","Headers","options","bearer","append","body","JSON","stringify","url","process","fetch","response","ok","fullErrorMessage","statusText","text","textResponse","search","Error","json","request","scopes","account","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenRedirect","response2","email","names","substring","indexOf","firstname","lastname","charAt","toUpperCase","slice"],"sourceRoot":""}